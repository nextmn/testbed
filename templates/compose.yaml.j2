# Copyright 2024 Louis Royer. All rights reserved.
# Use of this source code is governed by a MIT-style license that can be
# found in the LICENSE file.
# SPDX-License-Identifier: MIT
name: "nextmn-testbed"

services:
#~ if ("nextmn-srv6" in config["topology"]["dataplane"]) and (config["topology"]["controlplane"] == "free5gc")
  {{ container_s(name='ue1', image='docker.io/louisroyer/ueransim-ue', image_build='https://github.com/louisroyer-docker/ueransim.git#master:ue', enable_ipv6=True, debug='always', debug_volume=True, iface_tun=True, cap_net_admin=True, init=True) }}
    depends_on:
      amf:
        condition: service_started
  #~ if config["topology"]["ran"]["version"] == "dev"
    volumes:
      - ../{{ config.topology.ran.dev_build_path }}/nr-ue:/usr/bin/nr-ue:ro
      - ../{{ config.topology.ran.dev_build_path }}/nr-cli:/usr/bin/nr-cli:ro
  #~ endif
    environment:
      MSISDN: "0000000001"
      GNBS: |-
        - "{{ ipv6('gnb1', 'ran') }}"
  #~ if config["topology"]["ran"]["handover"]
        - "{{ ipv6('gnb2', 'ran') }}"
  #~ endif
      CONFIGURED_NSSAI: |-
        - sst: 1
          sd: 000001
      DEFAULT_NSSAI: |-
        - sst: 1
          sd: 000001
      SESSIONS: |-
        - type: "IPv4"
          apn: "srv6"
          slice:
            sst: 1
            sd: 000001
    networks:
      ran: # automatic allocation by docker compose

  #~ if config["topology"]["nb_ue"] > 1
  {{ container_s(name='ue2', image='docker.io/louisroyer/ueransim-ue', image_build='https://github.com/louisroyer-docker/ueransim.git#master:ue', enable_ipv6=True, debug='always', debug_volume=True, iface_tun=True, cap_net_admin=True, init=True) }}
    depends_on:
      amf:
        condition: service_started
    #~ if config["topology"]["ran"]["version"] == "dev"
    volumes:
      - ../{{ config.topology.ran.dev_build_path }}/nr-ue:/usr/bin/nr-ue:ro
      - ../{{ config.topology.ran.dev_build_path }}/nr-cli:/usr/bin/nr-cli:ro
    #~ endif
    environment:
      MSISDN: "0000000002"
      GNBS: |-
        - "{{ ipv6('gnb2', 'ran') }}"
      CONFIGURED_NSSAI: |-
        - sst: 1
          sd: 000001
      DEFAULT_NSSAI: |-
        - sst: 1
          sd: 000001
      SESSIONS: |-
        - type: "IPv4"
          apn: "srv6"
          slice:
            sst: 1
            sd: 000001
    networks:
      ran: # automatic allocation by docker compose
  #~ endif
#~ endif

#~ if ("free5gc" in config["topology"]["dataplane"]) and (config["topology"]["controlplane"] == "free5gc")
  {{ container_s(name='ue3', image='docker.io/louisroyer/ueransim-ue', image_build='https://github.com/louisroyer-docker/ueransim.git#master:ue', enable_ipv6=True, debug='always', debug_volume=True, iface_tun=True, cap_net_admin=True, init=True) }}
    depends_on:
      amf:
        condition: service_started
  #~ if config["topology"]["ran"]["version"] == "dev"
    volumes:
      - ../{{ config.topology.ran.dev_build_path }}/nr-ue:/usr/bin/nr-ue:ro
      - ../{{ config.topology.ran.dev_build_path }}/nr-cli:/usr/bin/nr-cli:ro
  #~ endif
    environment:
      MSISDN: "0000000003"
      GNBS: |-
        - "{{ ipv6('gnb1', 'ran') }}"
  #~ if config["topology"]["ran"]["handover"]
        - "{{ ipv6('gnb2', 'ran') }}"
  #~ endif
      CONFIGURED_NSSAI: |-
        - sst: 1
          sd: 000002
      DEFAULT_NSSAI: |-
        - sst: 1
          sd: 000002
      SESSIONS: |-
        - type: "IPv4"
          apn: "free5gc"
          slice:
            sst: 1
            sd: 000002
    networks:
      ran: # automatic allocation by docker compose

  #~ if config["topology"]["nb_ue"] > 1
  {{ container_s(name='ue4', image='docker.io/louisroyer/ueransim-ue', image_build='https://github.com/louisroyer-docker/ueransim.git#master:ue', enable_ipv6=True, debug='always', debug_volume=True, iface_tun=True, cap_net_admin=True, init=True) }}
    depends_on:
      amf:
        condition: service_started
    #~ if config["topology"]["ran"]["version"] == "dev"
    volumes:
      - ../{{ config.topology.ran.dev_build_path }}/nr-ue:/usr/bin/nr-ue:ro
      - ../{{ config.topology.ran.dev_build_path }}/nr-cli:/usr/bin/nr-cli:ro
    #~ endif
    environment:
      MSISDN: "0000000004"
      GNBS: |-
        - "{{ ipv6('gnb2', 'ran') }}"
      CONFIGURED_NSSAI: |-
        - sst: 1
          sd: 000002
      DEFAULT_NSSAI: |-
        - sst: 1
          sd: 000002
      SESSIONS: |-
        - type: "IPv4"
          apn: "free5gc"
          slice:
            sst: 1
            sd: 000002
    networks:
      ran: # automatic allocation by docker compose
  #~ endif
#~ endif

#~ if ("nextmn-upf" in config["topology"]["dataplane"]) and (config["topology"]["controlplane"] == "free5gc")
  {{ container_s(name='ue5', image='docker.io/louisroyer/ueransim-ue', image_build='https://github.com/louisroyer-docker/ueransim.git#master:ue', enable_ipv6=True, debug='always', debug_volume=True, iface_tun=True, cap_net_admin=True, init=True) }}
    depends_on:
      amf:
        condition: service_started
  #~ if config["topology"]["ran"]["version"] == "dev"
    volumes:
      - ../{{ config.topology.ran.dev_build_path }}/nr-ue:/usr/bin/nr-ue:ro
      - ../{{ config.topology.ran.dev_build_path }}/nr-cli:/usr/bin/nr-cli:ro
  #~ endif
    environment:
      MSISDN: "0000000005"
      GNBS: |-
        - "{{ ipv6('gnb1', 'ran') }}"
  #~ if config["topology"]["ran"]["handover"]
        - "{{ ipv6('gnb2', 'ran') }}"
  #~ endif
      CONFIGURED_NSSAI: |-
        - sst: 1
          sd: 000003
      DEFAULT_NSSAI: |-
        - sst: 1
          sd: 000003
      SESSIONS: |-
        - type: "IPv4"
          apn: "nextmn-upf"
          slice:
            sst: 1
            sd: 000003
    networks:
      ran: # automatic allocation by docker compose

  #~ if config["topology"]["nb_ue"] > 1
  {{ container_s(name='ue6', image='docker.io/louisroyer/ueransim-ue', image_build='https://github.com/louisroyer-docker/ueransim.git#master:ue', enable_ipv6=True, debug='always', debug_volume=True, iface_tun=True, cap_net_admin=True, init=True) }}
    depends_on:
      amf:
        condition: service_started
    #~ if config["topology"]["ran"]["version"] == "dev"
    volumes:
      - ../{{ config.topology.ran.dev_build_path }}/nr-ue:/usr/bin/nr-ue:ro
      - ../{{ config.topology.ran.dev_build_path }}/nr-cli:/usr/bin/nr-cli:ro
    #~ endif
    environment:
      MSISDN: "0000000006"
      GNBS: |-
        - "{{ ipv6('gnb2', 'ran') }}"
      CONFIGURED_NSSAI: |-
        - sst: 1
          sd: 000003
      DEFAULT_NSSAI: |-
        - sst: 1
          sd: 000003
      SESSIONS: |-
        - type: "IPv4"
          apn: "nextmn-upf"
          slice:
            sst: 1
            sd: 000003
    networks:
      ran: # automatic allocation by docker compose
  #~ endif
#~ endif

#~ if config["topology"]["controlplane"] == "free5gc"
  {{ container_s(name='gnb1', image='docker.io/louisroyer/ueransim-gnb', image_build='https://github.com/louisroyer-docker/ueransim.git#master:gnb', enable_ipv6=True, restart='always', iface_tun=True, cap_net_admin=True, debug='allow') }}
    depends_on:
      amf:
        condition: service_started
  #~ if config["topology"]["ran"]["version"] == "dev"
    volumes:
      - ../{{ config.topology.ran.dev_build_path }}/nr-gnb:/usr/bin/nr-gnb:ro
      - ../{{ config.topology.ran.dev_build_path }}/nr-cli:/usr/bin/nr-cli:ro
  #~ endif
    environment:
      NCI: "0x000000010"
      RLS_IP: "{{ ipv6('gnb1', 'ran') }}"
      N2_IP: "{{ ipv4('gnb1', 'control') }}"
      N3_IP: "{{ ipv4('gnb1', 'dataplane') }}"
      SUPPORTED_NSSAIS: |-
  #~ if "nextmn-srv6" in config["topology"]["dataplane"]
        - sst: 1
          sd: 000001
  #~ elif "free5gc" in config["topology"]["dataplane"]
        - sst: 1
          sd: 000002
  #~ elif "nextmn-upf" in config["topology"]["dataplane"]
        - sst: 1
          sd: 000003
  #~ endif
      MCC: "001"
      MNC: "01"
      ID_LEN: 32
      TAC: 1
      AMF_CONFIGS: |-
        - address: "{{ ipv4('amf', 'control') }}"
          port: 38412
  #~ if "nextmn-srv6" in config["topology"]["dataplane"]
      ROUTES_INIT: |-
        - add {{ ipv4('srgw0', 'srgw0') }} via {{ ipv4('srgw0', 'dataplane') }}
  #~ endif
    networks:
      ran:
        ipv4_address: "{{ ipv4('gnb1', 'ran') }}"
        ipv6_address: "{{ ipv6('gnb1', 'ran') }}"
      control:
        ipv4_address: "{{ ipv4('gnb1', 'control') }}"
      dataplane:
        ipv4_address: "{{ ipv4('gnb1', 'dataplane') }}"

  #~ if (config["topology"]["nb_ue"] > 1) or (config["topology"]["ran"]["handover"])
  {{ container_s(name='gnb2', image='docker.io/louisroyer/ueransim-gnb', image_build='https://github.com/louisroyer-docker/ueransim.git#master:gnb', enable_ipv6=True, restart='always', iface_tun=True, cap_net_admin=True, debug='allow') }}
    depends_on:
      amf:
        condition: service_started
    #~ if config["topology"]["ran"]["version"] == "dev"
    volumes:
      - ../{{ config.topology.ran.dev_build_path }}/nr-gnb:/usr/bin/nr-gnb:ro
      - ../{{ config.topology.ran.dev_build_path }}/nr-cli:/usr/bin/nr-cli:ro
    #~ endif
    environment:
      NCI: "0x000000020"
      RLS_IP: "{{ ipv6('gnb2', 'ran') }}"
      N2_IP: "{{ ipv4('gnb2', 'control') }}"
      N3_IP: "{{ ipv4('gnb2', 'dataplane') }}"
      SUPPORTED_NSSAIS: |-
  #~ if "nextmn-srv6" in config["topology"]["dataplane"]
        - sst: 1
          sd: 000001
  #~ elif "free5gc" in config["topology"]["dataplane"]
        - sst: 1
          sd: 000002
  #~ elif "nextmn-upf" in config["topology"]["dataplane"]
        - sst: 1
          sd: 000003
  #~ endif
      MCC: "001"
      MNC: "01"
      ID_LEN: 32
      TAC: 1
      AMF_CONFIGS: |-
        - address: "{{ ipv4('amf', 'control') }}"
          port: 38412
  #~ if "nextmn-srv6" in config["topology"]["dataplane"]
      ROUTES_INIT: |-
        - add {{ ipv4('srgw0', 'srgw0') }} via {{ ipv4('srgw0', 'dataplane') }}
  #~ endif
    networks:
      ran:
        ipv4_address: "{{ ipv4('gnb2', 'ran') }}"
        ipv6_address: "{{ ipv6('gnb2', 'ran') }}"
      control:
        ipv4_address: "{{ ipv4('gnb2', 'control') }}"
      dataplane:
        ipv4_address: "{{ ipv4('gnb2', 'dataplane') }}"
  #~ endif
#~ endif

#~ if config["topology"]["controlplane"] == "free5gc"
  {{ container_s(name='amf', image='docker.io/louisroyer/dev-free5gc-amf', image_build='https://github.com/louisroyer-docker/free5gc.git#master:amf', restart='always') }}
    depends_on:
      smf:
        condition: service_started
      nrf: # required to being able to deregister propertly
        condition: service_started
    environment:
      LOG_LEVEL: "{{ log_level() }}"
      LOG_REPORT_CALLER: "{{ log_report_caller() }}"
      GIN_MODE: "release"
      N2: "{{ ipv4('amf', 'control') }}"
      SBI_REGISTER_IPV4: "{{ ipv4('amf', 'sbi') }}"
      SBI_BINDING_IPV4: "{{ ipv4('amf', 'sbi') }}"
      SBI_BINDING_PORT: "8000"
      MCC: "001"
      MNC: "01"
      NRF: "nrf.sbi:8000"
      NRF_PEM: "{{ openssl_secret_pem('nrf', 'sbi') }}"
      AMF_PEM: "{{ openssl_secret_pem('amf', 'sbi') }}"
      AMF_KEY: "{{ openssl_secret_key('amf', 'sbi') }}"
      SUPPORT_DNN_LIST: |-
  #~ if "nextmn-srv6" in config["topology"]["dataplane"]
        - srv6
  #~ endif
  #~ if "free5gc" in config["topology"]["dataplane"]
        - free5gc
  #~ endif
  #~ if "nextmn-upf" in config["topology"]["dataplane"]
        - nextmn-upf
  #~ endif
      SNSSAI_LIST: |-
  #~ if "nextmn-srv6" in config["topology"]["dataplane"]
        - sst: 1
          sd: 000001
  #~ endif
  #~ if "free5gc" in config["topology"]["dataplane"]
        - sst: 1
          sd: 000002
  #~ endif
  #~ if "nextmn-upf" in config["topology"]["dataplane"]
        - sst: 1
          sd: 000003
  #~ endif
      TAC: "000001"
    secrets:
      {{ openssl_secrets_pem_s('nrf', 'sbi') | indent(2) }}
      {{ openssl_secrets_s('amf', 'sbi') | indent(2) }}
    networks:
      control:
        ipv4_address: "{{ ipv4('amf', 'control') }}"
      sbi:
        ipv4_address: "{{ ipv4('amf', 'sbi') }}"

  {{ container_s(name='mongodb', image='docker.io/library/mongo', restart='always', command='mongod --port 27017 --bind_ip_all') }}
    networks:
      db:

  {{ container_s(name='nrf', image='docker.io/louisroyer/dev-free5gc-nrf', image_build='https://github.com/louisroyer-docker/free5gc.git#master:nrf', restart='always') }}
    depends_on:
      mongodb: # required to being able to deregister propertly
        condition: service_started
    environment:
      LOG_LEVEL: "{{ log_level() }}"
      LOG_REPORT_CALLER: "{{ log_report_caller() }}"
      GIN_MODE: "release"
      MONGO_HOST: "mongodb.db"
      SBI_REGISTER_IPV4: "{{ ipv4('nrf', 'sbi') }}"
      SBI_BINDING_IPV4: "{{ ipv4('nrf', 'sbi') }}"
      SBI_BINDING_PORT: "8000"
      MCC: "001"
      MNC: "01"
      NRF_PEM: "{{ openssl_secret_pem('nrf', 'sbi') }}"
      NRF_KEY: "{{ openssl_secret_key('nrf', 'sbi') }}"
      ROOT_PEM: "{{ openssl_root_secret_pem() }}"
      ROOT_KEY: "{{ openssl_root_secret_key() }}"
      OAUTH_ENABLE: "false" # disabled until https://github.com/free5gc/nrf/issues/57 is fixed
    secrets:
      {{ openssl_secrets_s('nrf', 'sbi') | indent(2) }}
      {{ openssl_root_secrets_s() | indent(2) }}
    networks:
      db:
      sbi:
        ipv4_address: "{{ ipv4('nrf', 'sbi') }}"

  {{ container_s(name='ausf', image='docker.io/louisroyer/dev-free5gc-ausf', image_build='https://github.com/louisroyer-docker/free5gc.git#master:ausf', restart='always') }}
    depends_on:
      nrf: # required to being able to deregister propertly
        condition: service_started
    environment:
      LOG_LEVEL: "{{ log_level() }}"
      LOG_REPORT_CALLER: "{{ log_report_caller() }}"
      GIN_MODE: "release"
      SBI_REGISTER_IPV4: "{{ ipv4('ausf', 'sbi') }}"
      SBI_BINDING_IPV4: "{{ ipv4('ausf', 'sbi') }}"
      SBI_BINDING_PORT: "8000"
      MCC: "001"
      MNC: "01"
      NRF: "nrf.sbi:8000"
      NRF_PEM: "{{ openssl_secret_pem('nrf', 'sbi') }}"
      AUSF_PEM: "{{ openssl_secret_pem('ausf', 'sbi') }}"
      AUSF_KEY: "{{ openssl_secret_key('ausf', 'sbi') }}"
    networks:
      sbi:
        ipv4_address: "{{ ipv4('ausf', 'sbi') }}"

  {{ container_s(name='udm', image='docker.io/louisroyer/dev-free5gc-udm', image_build='https://github.com/louisroyer-docker/free5gc.git#master:udm', restart='always') }}
    depends_on:
      nrf: # required to being able to deregister propertly
        condition: service_started
    environment:
      LOG_LEVEL: "{{ log_level() }}"
      LOG_REPORT_CALLER: "{{ log_report_caller() }}"
      GIN_MODE: "release"
      SBI_REGISTER_IPV4: "{{ ipv4('udm', 'sbi') }}"
      SBI_BINDING_IPV4: "{{ ipv4('udm', 'sbi') }}"
      SBI_BINDING_PORT: "8000"
      NRF: "nrf.sbi:8000"
      NRF_PEM: "{{ openssl_secret_pem('nrf', 'sbi') }}"
      UDM_PEM: "{{ openssl_secret_pem('udm', 'sbi') }}"
      UDM_KEY: "{{ openssl_secret_key('udm', 'sbi') }}"
    secrets:
      {{ openssl_secrets_pem_s('nrf', 'sbi') | indent(2) }}
      {{ openssl_secrets_s('udm', 'sbi') | indent(2) }}
    networks:
      sbi:
        ipv4_address: "{{ ipv4('udm', 'sbi') }}"

  {{ container_s(name='udr', image='docker.io/louisroyer/dev-free5gc-udr', image_build='https://github.com/louisroyer-docker/free5gc.git#master:udr', restart='always') }}
    depends_on:
      nrf: # required to being able to deregister propertly
        condition: service_started
    environment:
      LOG_LEVEL: "{{ log_level() }}"
      LOG_REPORT_CALLER: "{{ log_report_caller() }}"
      GIN_MODE: "release"
      MONGO_HOST: "mongodb.db"
      SBI_REGISTER_IPV4: "{{ ipv4('udr', 'sbi') }}"
      SBI_BINDING_IPV4: "{{ ipv4('udr', 'sbi') }}"
      SBI_BINDING_PORT: "8000"
      NRF: "nrf.sbi:8000"
      NRF_PEM: "{{ openssl_secret_pem('nrf', 'sbi') }}"
      UDR_PEM: "{{ openssl_secret_pem('udr', 'sbi') }}"
      UDR_KEY: "{{ openssl_secret_key('udr', 'sbi') }}"
    secrets:
      {{ openssl_secrets_pem_s('nrf', 'sbi') | indent(2) }}
      {{ openssl_secrets_s('udr', 'sbi') | indent(2) }}
    networks:
      db:
      sbi:
        ipv4_address: "{{ ipv4('udr', 'sbi') }}"

  {{ container_s(name='pcf', image='docker.io/louisroyer/dev-free5gc-pcf', image_build='https://github.com/louisroyer-docker/free5gc.git#master:pcf', restart='always') }}
    depends_on:
      nrf: # required to being able to deregister propertly
        condition: service_started
    environment:
      LOG_LEVEL: "{{ log_level() }}"
      LOG_REPORT_CALLER: "{{ log_report_caller() }}"
      GIN_MODE: "release"
      MONGO_HOST: "mongodb.db"
      SBI_REGISTER_IPV4: "{{ ipv4('pcf', 'sbi') }}"
      SBI_BINDING_IPV4: "{{ ipv4('pcf', 'sbi') }}"
      SBI_BINDING_PORT: "8000"
      NRF: "nrf.sbi:8000"
      NRF_PEM: "{{ openssl_secret_pem('nrf', 'sbi') }}"
      PCF_PEM: "{{ openssl_secret_pem('pcf', 'sbi') }}"
      PCF_KEY: "{{ openssl_secret_key('pcf', 'sbi') }}"
    secrets:
      {{ openssl_secrets_pem_s('nrf', 'sbi') | indent(2) }}
      {{ openssl_secrets_s('pcf', 'sbi') | indent(2) }}
    networks:
      db:
      sbi:
        ipv4_address: "{{ ipv4('pcf', 'sbi') }}"

  {{ container_s(name='chf', image='docker.io/louisroyer/dev-free5gc-chf', image_build='https://github.com/louisroyer-docker/free5gc.git#master:chf', restart='always') }}
    depends_on:
      nrf: # required to being able to deregister propertly
        condition: service_started
      webconsole:
        condition: service_started
    environment:
      LOG_LEVEL: "{{ log_level() }}"
      LOG_REPORT_CALLER: "{{ log_report_caller() }}"
      GIN_MODE: "release"
      MONGO_HOST: "mongodb.db"
      SBI_REGISTER_IPV4: "{{ ipv4('chf', 'sbi') }}"
      SBI_BINDING_IPV4: "{{ ipv4('chf', 'sbi') }}"
      SBI_BINDING_PORT: "8000"
      NRF: "nrf.sbi:8000"
      NRF_PEM: "{{ openssl_secret_pem('nrf', 'sbi') }}"
      BILLING_IP: "{{ ipv4('webconsole', 'sbi') }}"
      BILLING_ENABLE: "false"
      CHF_PEM: "{{ openssl_secret_pem('chf', 'sbi') }}"
      CHF_KEY: "{{ openssl_secret_key('chf', 'sbi') }}"
    secrets:
      {{ openssl_secrets_pem_s('nrf', 'sbi') | indent(2) }}
      {{ openssl_secrets_s('chf', 'sbi') | indent(2) }}
    networks:
      db:
      sbi:
        ipv4_address: "{{ ipv4('chf', 'sbi') }}"

  {{ container_s(name='webconsole', image='docker.io/louisroyer/dev-free5gc-webconsole', image_build='https://github.com/louisroyer-docker/free5gc.git#master:webconsole', restart='always') }}
    depends_on:
      nrf: # required to being able to deregister propertly
        condition: service_started
    environment:
      LOG_LEVEL: "{{ log_level() }}"
      LOG_REPORT_CALLER: "{{ log_report_caller() }}"
      GIN_MODE: "release"
      MONGO_HOST: "mongodb.db"
      NRF: "nrf.sbi:8000"
      NRF_PEM: "{{ openssl_secret_pem('nrf', 'sbi') }}"
      BILLING_IP: "{{ ipv4('webconsole', 'sbi') }}"
      CHF_PEM: "{{ openssl_secret_pem('chf', 'sbi') }}"
      CHF_KEY: "{{ openssl_secret_key('chf', 'sbi') }}"
    secrets:
      {{ openssl_secrets_pem_s('nrf', 'sbi') | indent(2) }}
      {{ openssl_secrets_s('chf', 'sbi') | indent(2) }}
    networks:
      db:
      sbi:
        ipv4_address: "{{ ipv4('webconsole', 'sbi') }}"

  {{ container_s(name='smf', image='docker.io/louisroyer/dev-free5gc-smf', image_build='https://github.com/louisroyer-docker/free5gc.git#master:smf', restart='always') }}
    depends_on:
      nrf: # required to being able to deregister propertly
        condition: service_started
  #~ if "nextmn-srv6" in config["topology"]["dataplane"]
      r0:
        condition: service_healthy
      r1:
        condition: service_healthy
      srgw0:
        condition: service_healthy
  #~ endif
    environment:
      LOG_LEVEL: "{{ log_level() }}"
      LOG_REPORT_CALLER: "{{ log_report_caller() }}"
      GIN_MODE: "release"
      SBI_REGISTER_IPV4: "{{ ipv4('smf', 'sbi') }}"
      SBI_BINDING_IPV4: "{{ ipv4('smf', 'sbi') }}"
      SBI_BINDING_PORT: "8000"
      NRF: "nrf.sbi:8000"
      NRF_PEM: "{{ openssl_secret_pem('nrf', 'sbi') }}"
      SMF_PEM: "{{ openssl_secret_pem('smf', 'sbi') }}"
      SMF_KEY: "{{ openssl_secret_key('smf', 'sbi') }}"
      N4: "{{ ipv4('smf', 'control') }}"
      MCC: "001"
      MNC: "01"
      SNSSAI_INFOS: |-
  #~ if "nextmn-srv6" in config["topology"]["dataplane"]
        - sNssai:
            sst: 1
            sd: 000001
          dnnInfos:
            - dnn: srv6
              dns:
                ipv4: 9.9.9.9 # TODO: replace with local dns
                ipv6: 2620:fe::fe
  #~ endif
  #~ if "free5gc" in config["topology"]["dataplane"]
        - sNssai:
            sst: 1
            sd: 000002
          dnnInfos:
            - dnn: free5gc
              dns:
                ipv4: 9.9.9.9 # TODO: replace with local dns
                ipv6: 2620:fe::fe
  #~ endif
  #~ if "nextmn-upf" in config["topology"]["dataplane"]
        - sNssai:
            sst: 1
            sd: 000003
          dnnInfos:
            - dnn: nextmn-upf
              dns:
                ipv4: 9.9.9.9 # TODO: replace with local dns
                ipv6: 2620:fe::fe
  #~ endif
      UP_NODES: |-
        GNB:
          type: AN
  #~ if "nextmn-srv6" in config["topology"]["dataplane"]
        UPF_SRV6:
          type: UPF
          nodeID: "{{ ipv4('srv6-ctrl', 'control') }}"
          addr: "{{ ipv4('srv6-ctrl', 'control') }}"
          sNssaiUpfInfos:
            - sNssai:
                sst: 1
                sd: 000001
              dnnUpfInfoList:
                - dnn: srv6
                  pools:
                    - cidr: {{ ipv4_subnet('slice0') }}
                  staticPools:
                    - cidr: {{ ipv4_subnet('slice0-static') }}
          interfaces:
            - interfaceType: N3
              endpoints:
                - {{ ipv4('srgw0', 'srgw0') }}
              networkInstances:
                - srv6
  #~ endif
  #~ if "free5gc" in config["topology"]["dataplane"]
        UPFI1_F5GC:
          type: UPF
          nodeID: "{{ ipv4('upfi1-f5gc', 'control') }}"
          addr: "{{ ipv4('upfi1-f5gc', 'control') }}"
          sNssaiUpfInfos:
            - sNssai:
                sst: 1
                sd: 000002
              dnnUpfInfoList:
                - dnn: free5gc
          interfaces:
            - interfaceType: N3
              endpoints:
                - {{ ipv4('upfi1-f5gc', 'dataplane') }}
              networkInstances:
                - free5gc
            - interfaceType: N9
              endpoints:
                - {{ ipv4('upfi1-f5gc', 'dataplane') }}
              networkInstances:
                - free5gc
        UPFA1_F5GC:
          type: UPF
          nodeID: "{{ ipv4('upfa1-f5gc', 'control') }}"
          addr: "{{ ipv4('upfa1-f5gc', 'control') }}"
          sNssaiUpfInfos:
            - sNssai:
                sst: 1
                sd: 000002
              dnnUpfInfoList:
                - dnn: free5gc
                  pools:
                    - cidr: {{ ipv4_subnet('slice1-e1') }}
                  staticPools:
                    - cidr: {{ ipv4_subnet('slice1-e1-static') }}
          interfaces:
            - interfaceType: N9
              endpoints:
                - {{ ipv4('upfa1-f5gc', 'dataplane') }}
              networkInstances:
                - free5gc
    #~ if config["topology"]["nb_edges"] > 1
        UPFA2_F5GC:
          type: UPF
          nodeID: "{{ ipv4('upfa2-f5gc', 'control') }}"
          addr: "{{ ipv4('upfa2-f5gc', 'control') }}"
          sNssaiUpfInfos:
            - sNssai:
                sst: 1
                sd: 000002
              dnnUpfInfoList:
                - dnn: free5gc
                  pools:
                    - cidr: {{ ipv4_subnet('slice1-e2') }}
                  staticPools:
                    - cidr: {{ ipv4_subnet('slice1-e2-static') }}
          interfaces:
            - interfaceType: N9
              endpoints:
                - {{ ipv4('upfa2-f5gc', 'dataplane') }}
              networkInstances:
                - free5gc
    #~ endif
  #~ endif
  #~ if "nextmn-upf" in config["topology"]["dataplane"]
        UPFI1_NEXTMNUPF:
          type: UPF
          nodeID: "{{ ipv4('upfi1-nmn', 'control') }}"
          addr: "{{ ipv4('upfi1-nmn', 'control') }}"
          sNssaiUpfInfos:
            - sNssai:
                sst: 1
                sd: 000003
              dnnUpfInfoList:
                - dnn: nextmn-upf
          interfaces:
            - interfaceType: N3
              endpoints:
                - {{ ipv4('upfi1-nmn', 'dataplane') }}
              networkInstances:
                - nextmn-upf
            - interfaceType: N9
              endpoints:
                - {{ ipv4('upfi1-nmn', 'dataplane') }}
              networkInstances:
                - nextmn-upf
        UPFA1_NEXTMNUPF:
          type: UPF
          nodeID: "{{ ipv4('upfa1-nmn', 'control') }}"
          addr: "{{ ipv4('upfa1-nmn', 'control') }}"
          sNssaiUpfInfos:
            - sNssai:
                sst: 1
                sd: 000003
              dnnUpfInfoList:
                - dnn: nextmn-upf
                  pools:
                    - cidr: {{ ipv4_subnet('slice2-e1') }}
                  staticPools:
                    - cidr: {{ ipv4_subnet('slice2-e1-static') }}
          interfaces:
            - interfaceType: N9
              endpoints:
                - {{ ipv4('upfa1-nmn', 'dataplane') }}
              networkInstances:
                - nextmn-upf
    #~ if config["topology"]["nb_edges"] > 1
        UPFA2_NEXTMNUPF:
          type: UPF
          nodeID: "{{ ipv4('upfa2-nmn', 'control') }}"
          addr: "{{ ipv4('upfa2-nmn', 'control') }}"
          sNssaiUpfInfos:
            - sNssai:
                sst: 1
                sd: 000003
              dnnUpfInfoList:
                - dnn: nextmn-upf
                  pools:
                    - cidr: {{ ipv4_subnet('slice2-e2') }}
                  staticPools:
                    - cidr: {{ ipv4_subnet('slice2-e2-static') }}
          interfaces:
            - interfaceType: N9
              endpoints:
                - {{ ipv4('upfa2-nmn', 'dataplane') }}
              networkInstances:
                - nextmn-upf
    #~ endif
  #~ endif
      ULCL: "true"
      LINKS: |-
  #~ if "nextmn-srv6" in config["topology"]["dataplane"]
        - A: GNB
          B: UPF_SRV6
  #~endif
  #~ if "free5gc" in config["topology"]["dataplane"]
        - A: GNB
          B: UPFI1_F5GC
        - A: UPFI1_F5GC
          B: UPFA1_F5GC
    #~ if config["topology"]["nb_edges"] > 1
        - A: UPFI1_F5GC
          B: UPFA2_F5GC
    #~ endif
  #~ endif
  #~ if "nextmn-upf" in config["topology"]["dataplane"]
        - A: GNB
          B: UPFI1_NEXTMNUPF
        - A: UPFI1_NEXTMNUPF
          B: UPFA1_NEXTMNUPF
    #~ if config["topology"]["nb_edges"] > 1
        - A: UPFI1_NEXTMNUPF
          B: UPFA2_NEXTMNUPF
    #~ endif
  #~ endif
      UEROUTING_INFO: |-
        none1:
          members:
  #~ if "nextmn-srv6" in config["topology"]["dataplane"]
            - imsi-001010000000001
    #~ if config["topology"]["nb_ue"] > 1
            - imsi-001010000000002
    #~ endif
  #~ endif
  #~ if "free5gc" in config["topology"]["dataplane"]
            - imsi-001010000000003
    #~ if config["topology"]["nb_ue"] > 1
            - imsi-001010000000004
    #~ endif
  #~ endif
  #~ if "nextmn-upf" in config["topology"]["dataplane"]
            - imsi-001010000000005
    #~ if config["topology"]["nb_ue"] > 1
            - imsi-001010000000006
    #~ endif
  #~ endif
          topology:
  #~ if "nextmn-srv6" in config["topology"]["dataplane"]
            - A: GNB
              B: UPF_SRV6
  #~ endif
  #~ if "free5gc" in config["topology"]["dataplane"]
            - A: GNB
              B: UPFI1_F5GC
            - A: UPFI1_F5GC
              B: UPFA1_F5GC
    #~ if config["topology"]["nb_edges"] > 1
            - A: UPFI1_F5GC
              B: UPFA2_F5GC
    #~ endif
  #~ endif
  #~ if "nextmn-upf" in config["topology"]["dataplane"]
            - A: GNB
              B: UPFI1_NEXTMNUPF
            - A: UPFI1_NEXTMNUPF
              B: UPFA1_NEXTMNUPF
    #~ if config["topology"]["nb_edges"] > 1
            - A: UPFI1_NEXTMNUPF
              B: UPFA2_NEXTMNUPF
    #~ endif
  #~ endif
  #~ if config["topology"]["nb_edges"] > 1
          specificPath:
    #~ if "free5gc" in config["topology"]["dataplane"]
            - dest: {{ ipv4('s', 'service') }}/32
              path: [UPFI1_F5GC, UPFA1_F5GC]
            - dest: {{ ipv4('nots', 'service') }}/32
              path: [UPFI1_F5GC, UPFA2_F5GC]
    #~ endif
    #~ if "nextmn-upf" in config["topology"]["dataplane"]
            - dest: {{ ipv4('s', 'service') }}/32
              path: [UPFI1_NEXTMNUPF, UPFA1_NEXTMNUPF]
            - dest: {{ ipv4('nots', 'service') }}/32
              path: [UPFI1_NEXTMNUPF, UPFA2_NEXTMNUPF]
    #~ endif
  #~ endif
    secrets:
      {{ openssl_secrets_pem_s('nrf', 'sbi') | indent(2) }}
      {{ openssl_secrets_s('smf', 'sbi') | indent(2) }}
    networks:
      control:
        ipv4_address: "{{ ipv4('smf', 'control') }}"
      sbi:
        ipv4_address: "{{ ipv4('smf', 'sbi') }}"

  {{ container_s(name='populate', image='docker.io/louisroyer/dev-free5gc-populate', image_build='https://github.com/louisroyer-docker/free5gc-populate.git#master:dev-free5gc-populate', restart='no') }}
    depends_on:
      mongodb: # required to being able to deregister propertly
        condition: service_started
    environment:
      MONGO_HOST: "mongodb.db"
      SLICES: |-
  #~ if "nextmn-srv6" in config["topology"]["dataplane"]
        - sst: 1
          sd: 000001
          varqi: 9
          dnn: srv6
  #~ endif
  #~ if "free5gc" in config["topology"]["dataplane"]
        - sst: 1
          sd: 000002
          varqi: 9
          dnn: free5gc
  #~ endif
  #~ if "nextmn-upf" in config["topology"]["dataplane"]
        - sst: 1
          sd: 000003
          varqi: 9
          dnn: nextmn-upf
  #~ endif
      IMSI: |-
  #~ if "nextmn-srv6" in config["topology"]["dataplane"]
        - imsi-001010000000001
    #~ if config["topology"]["nb_ue"] > 1
        - imsi-001010000000002
    #~ endif
  #~ endif
  #~ if "free5gc" in config["topology"]["dataplane"]
        - imsi-001010000000003
    #~ if config["topology"]["nb_ue"] > 1
        - imsi-001010000000004
    #~ endif
  #~ endif
  #~ if "nextmn-upf" in config["topology"]["dataplane"]
        - imsi-001010000000005
    #~ if config["topology"]["nb_ue"] > 1
        - imsi-001010000000006
    #~ endif
  #~ endif
    networks:
      db:

  {{ container_s(name='nssf', image='docker.io/louisroyer/dev-free5gc-nssf', image_build='https://github.com/louisroyer-docker/free5gc.git#master:nssf', restart='always') }}
    depends_on:
      nrf: # required to being able to deregister propertly
        condition: service_started
    environment:
      LOG_LEVEL: "{{ log_level() }}"
      LOG_REPORT_CALLER: "{{ log_report_caller() }}"
      GIN_MODE: "release"
      SBI_REGISTER_IPV4: "{{ ipv4('nssf', 'sbi') }}"
      SBI_BINDING_IPV4: "{{ ipv4('nssf', 'sbi') }}"
      SBI_BINDING_PORT: "8000"
      NRF: "nrf.sbi:8000"
      NRF_PEM: "{{ openssl_secret_pem('nrf', 'sbi') }}"
      NSSF_PEM: "{{ openssl_secret_pem('nssf', 'sbi') }}"
      NSSF_KEY: "{{ openssl_secret_key('nssf', 'sbi') }}"
      MCC: "001"
      MNC: "01"
      NSSF_NAME: "NSSF"
      SUPPORTED_NSSAI_IN_PLMN_LIST: |-
        - plmnId:
            mcc: 001
            mnc: 01
          supportedSnssaiList:
  #~ if "nextmn-srv6" in config["topology"]["dataplane"]
            - sst: 1
              sd: 000001
  #~ endif
  #~ if "free5gc" in config["topology"]["dataplane"]
            - sst: 1
              sd: 000002
  #~ endif
  #~ if "nextmn-upf" in config["topology"]["dataplane"]
            - sst: 1
              sd: 000003
  #~ endif
      NSI_LIST: |-
        - snssai:
            sst: 1
          nsiInformationList:
            - nrfId: http://nrf.sbi:8000/nnrf-nfm/v1/nf-instances
              nsiId: 10
      AMF_SET_LIST: |-
        - amfSetId: 1
          amfList:
            - ffa2e8d7-3275-49c7-8631-6af1df1d9d26
          nrfAmfSet: http://nrf.sbi:8000/nnrf-nfm/v1/nf-instances
          supportedNssaiAvailabilityData:
            - tai:
                plmnId:
                  mcc: 001
                  mnc: 01
                tac: 0000001
              supportedSnssaiList:
  #~ if "nextmn-srv6" in config["topology"]["dataplane"]
                - sst: 1
                  sd: 000001
  #~ endif
  #~ if "free5gc" in config["topology"]["dataplane"]
                - sst: 1
                  sd: 000002
  #~endif
  #~ if "nextmn-upf" in config["topology"]["dataplane"]
                - sst: 1
                  sd: 000003
  #~ endif
      AMF_LIST: |-
        - nfId: 469de254-2fe5-4ca0-8381-af3f500af77c
          supportedNssaiAvailabilityData:
            - tai:
                plmnId:
                  mcc: 001
                  mnc: 01
                tac: 000001
              supportedSnssaiList:
  #~ if "nextmn-srv6" in config["topology"]["dataplane"]
                - sst: 1
                  sd: 000001
  #~ endif
  #~ if "free5gc" in config["topology"]["dataplane"]
                - sst: 1
                  sd: 000002
  #~ endif
  #~ if "nextmn-upf" in config["topology"]["dataplane"]
                - sst: 1
                  sd: 000003
  #~ endif

      TA_LIST: |-
        - tai:
            plmnId:
              mcc: 001
              mnc: 01
            tac: 000001
          accessType: 3GPP_ACCESS
          supportedSnssaiList:
  #~ if "nextmn-srv6" in config["topology"]["dataplane"]
            - sst: 1
              sd: 000001
  #~ endif
  #~ if "free5gc" in config["topology"]["dataplane"]
            - sst: 1
              sd: 000002
  #~ endif
  #~ if "nextmn-upf" in config["topology"]["dataplane"]
            - sst: 1
              sd: 000003
  #~ endif

      MAPPING_LIST_FROM_PLMN: |-
        - operatorName: dummyoperator
          homePlmnId:
            mcc: 001
            mnc: 02
          mappingOfSnssai:
  #~ if "nextmn-srv6" in config["topology"]["dataplane"]
            - servingSnssai:
                sst: 1
                sd: 00001
              homeSnssai:
                sst: 1
                sd: 00001
  #~ endif
  #~ if "free5gc" in config["topology"]["dataplane"]
            - servingSnssai:
                sst: 1
                sd: 00002
              homeSnssai:
                sst: 1
                sd: 00002
  #~ endif
  #~ if "nextmn-upf" in config["topology"]["dataplane"]
            - servingSnssai:
                sst: 1
                sd: 00003
              homeSnssai:
                sst: 1
                sd: 00003
  #~ endif
    secrets:
      {{ openssl_secrets_pem_s('nrf', 'sbi') | indent(2) }}
      {{ openssl_secrets_s('nssf', 'sbi') | indent(2) }}
    networks:
      sbi:
        ipv4_address: "{{ ipv4('nssf', 'sbi') }}"
#~ endif

#~ if "nextmn-srv6" in config["topology"]["dataplane"]
  {{ container_s(name='r0', image='docker.io/louisroyer/dev-nextmn-srv6', image_build='https://github.com/louisroyer-docker/nextmn.git#master:srv6', restart='always', srv6=True, debug='allow') }}
    depends_on:
      srv6-ctrl:
        condition: service_healthy
      r0-db:
        condition: service_healthy
    volumes:
      {{ volume_ro('nextmn/routes-to-nei.sh', '/usr/local/bin/routes-to-nei.sh') }}
      - r0_db_volume:/var/run/postgresql/
    environment:
      LOG_LEVEL: "{{ log_level() }}"
      NEI_ADDR: "{{ ipv6_subnet('r1') }} {{ ipv6_subnet('srgw0') }} {{ ipv4('s', 'service') }}"
      NEI_NH: "{{ ipv6('r1', 'dataplane') }} {{ ipv6('srgw0', 'dataplane') }} {{ ipv4('s0', 'edge') }}"
      HOOKS: |-
        pre-init-hook: remove-default-routes.sh
        post-init-hook: routes-to-nei.sh
      HTTP_ADDRESS: "{{ ipv6('r0', 'control') }}"
      HTTP_PORT: "8080"
      CONTROLLER_URI: "http://[{{ ipv6('srv6-ctrl', 'control') }}]:8080"
      GIN_MODE: "release"
      BACKBONE_IP: "{{ ipv6('r0', 'dataplane') }}"
      LOCATOR: "{{ ipv6_subnet('r0') }}"
      ENDPOINTS: |-
        - prefix: "{{ ipv6_prefix('end-dx4', 'r0') }}"
          provider: "Linux"
          behavior: "End.DX4"
      IPV4_HEADEND_PREFIX: "{{ ipv4_subnet('slice0') }}"
      HEADENDS: |-
        - name: "downlink (controlled)"
          to: "{{ ipv4_subnet('slice0') }}"
          provider: "NextMN-ctrl"
          behavior: "H.Encaps"
          source-address-prefix: "{{ ipv6_prefix('end-dx4', 'r0') }}"
      POSTGRES_PASSWORD_FILE: /run/secrets/r0_db_password
      POSTGRES_HOST: "r0-db.nextmndb"
      POSTGRES_UNIX_SOCKET_PATH: "/var/run/postgresql/"
    secrets:
      - r0_db_password
    networks:
      control:
        ipv6_address: "{{ ipv6('r0', 'control') }}"
      dataplane:
        ipv6_address: "{{ ipv6('r0', 'dataplane') }}"
      edge:
        ipv4_address: "{{ ipv4('r0', 'edge') }}"
      nextmndb:

  {{ container_s(name='r0-db', image='docker.io/library/postgres', restart='always', command=False) }}
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "postgres", "-d", "postgres"]
      start_interval: 1s
      start_period: 10s
      interval: 10s
      timeout: 5s
      retries: 5
    secrets:
      - r0_db_password
    environment:
      POSTGRES_PASSWORD_FILE: /run/secrets/r0_db_password
    volumes:
      - r0_db_volume:/var/run/postgresql/
    networks:
      nextmndb:

  {{ container_s(name='r1', image='docker.io/louisroyer/dev-nextmn-srv6', image_build='https://github.com/louisroyer-docker/nextmn.git#master:srv6', restart='always', srv6=True, debug='allow' ) }}
    depends_on:
      srv6-ctrl:
        condition: service_healthy
      r1-db:
        condition: service_healthy
    volumes:
      {{ volume_ro('nextmn/routes-to-nei.sh', '/usr/local/bin/routes-to-nei.sh') }}
      - r1_db_volume:/var/run/postgresql/
    environment:
      LOG_LEVEL: "{{ log_level() }}"
      NEI_ADDR: "{{ ipv6_subnet('r0') }} {{ ipv6_subnet('srgw0') }} {{ ipv4('s', 'service') }}"
      NEI_NH: "{{ ipv6('r0', 'dataplane') }} {{ ipv6('srgw0', 'dataplane') }} {{ ipv4('s1', 'edge') }}"
      HOOKS: |-
        pre-init-hook: remove-default-routes.sh
        post-init-hook: routes-to-nei.sh
      HTTP_ADDRESS: "{{ ipv6('r1', 'control') }}"
      HTTP_PORT: "8080"
      CONTROLLER_URI: "http://[{{ ipv6('srv6-ctrl', 'control') }}]:8080"
      GIN_MODE: "release"
      BACKBONE_IP: "{{ ipv6('r1', 'dataplane') }}"
      LOCATOR: "{{ ipv6_subnet('r1') }}"
      ENDPOINTS: |-
        - prefix: "{{ ipv6_prefix('end-dx4', 'r1') }}"
          provider: "Linux"
          behavior: "End.DX4"
      IPV4_HEADEND_PREFIX: "{{ ipv4_subnet('slice0') }}"
      HEADENDS: |-
        - name: "downlink (controlled)"
          to: "{{ ipv4_subnet('slice0') }}"
          provider: "NextMN-ctrl"
          behavior: "H.Encaps"
          source-address-prefix: "{{ ipv6_prefix('end-dx4', 'r1') }}"
      POSTGRES_PASSWORD_FILE: /run/secrets/r1_db_password
      POSTGRES_HOST: "r1-db.nextmndb"
      POSTGRES_UNIX_SOCKET_PATH: "/var/run/postgresql"
    secrets:
      - r1_db_password
    networks:
      control:
        ipv6_address: "{{ ipv6('r1', 'control') }}"
      dataplane:
        ipv6_address: "{{ ipv6('r1', 'dataplane') }}"
      edge:
        ipv4_address: "{{ ipv4('r1', 'edge') }}"
      nextmndb:

  {{ container_s(name='r1-db', image='docker.io/library/postgres', restart='always', command=False) }}
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "postgres", "-d", "postgres"]
      start_interval: 1s
      start_period: 10s
      interval: 10s
      timeout: 5s
      retries: 5
    secrets:
      - r1_db_password
    environment:
      POSTGRES_PASSWORD_FILE: /run/secrets/r1_db_password
    volumes:
      - r1_db_volume:/var/run/postgresql/
    networks:
      nextmndb:

  #~ if config["topology"]["nb_edges"] > 2
  {{ container_s(name='r2', image='docker.io/louisroyer/dev-nextmn-srv6', image_build='https://github.com/louisroyer-docker/nextmn.git#master:srv6', restart='always', srv6=True, debug='allow' ) }}
    depends_on:
      srv6-ctrl:
        condition: service_healthy
      r2-db:
        condition: service_healthy
    volumes:
      {{ volume_ro('nextmn/routes-to-nei.sh', '/usr/local/bin/routes-to-nei.sh') }}
      - r2_db_volume:/var/run/postgresql/
    environment:
      LOG_LEVEL: "{{ log_level() }}"
      NEI_ADDR: "{{ ipv6_subnet('srgw1') }} {{ ipv4('s', 'service') }}"
      NEI_NH: "{{ ipv6('srgw1', 'dataplane') }} {{ ipv4('s2', 'edge') }}"
      HOOKS: |-
        pre-init-hook: remove-default-routes.sh
        post-init-hook: routes-to-nei.sh
      HTTP_ADDRESS: "{{ ipv6('r2', 'control') }}"
      HTTP_PORT: "8080"
      CONTROLLER_URI: "http://[{{ ipv6('srv6-ctrl', 'control') }}]:8080"
      GIN_MODE: "release"
      BACKBONE_IP: "{{ ipv6('r2', 'dataplane') }}"
      LOCATOR: "{{ ipv6_subnet('r2') }}"
      ENDPOINTS: |-
        - prefix: "{{ ipv6_prefix('end-dx4', 'r2') }}"
          provider: "Linux"
          behavior: "End.DX4"
      IPV4_HEADEND_PREFIX: "{{ ipv4_subnet('slice0') }}"
      HEADENDS: |-
        - name: "downlink (controlled)"
          to: "{{ ipv4_subnet('slice0') }}"
          provider: "NextMN-ctrl"
          behavior: "H.Encaps"
          source-address-prefix: "{{ ipv6_prefix('end-dx4', 'r2') }}"
      POSTGRES_PASSWORD_FILE: /run/secrets/r2_db_password
      POSTGRES_HOST: "r2-db.nextmndb"
      POSTGRES_UNIX_SOCKET_PATH: "/var/run/postgresql"
    secrets:
      - r2_db_password
    networks:
      control:
        ipv6_address: "{{ ipv6('r2', 'control') }}"
      dataplane:
        ipv6_address: "{{ ipv6('r2', 'dataplane') }}"
      edge:
        ipv4_address: "{{ ipv4('r2', 'edge') }}"
      nextmndb:

  {{ container_s(name='r2-db', image='docker.io/library/postgres', restart='always', command=False) }}
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "postgres", "-d", "postgres"]
      start_interval: 1s
      start_period: 10s
      interval: 10s
      timeout: 5s
      retries: 5
    secrets:
      - r2_db_password
    environment:
      POSTGRES_PASSWORD_FILE: /run/secrets/r2_db_password
    volumes:
      - r2_db_volume:/var/run/postgresql/
    networks:
      nextmndb:
    #~ endif

  {{ container_s(name='srgw0', image='docker.io/louisroyer/dev-nextmn-srv6', image_build='https://github.com/louisroyer-docker/nextmn.git#master:srv6', restart='always', srv6=True, debug='allow' ) }}
    depends_on:
      srv6-ctrl:
        condition: service_healthy
      srgw0-db:
        condition: service_healthy
    volumes:
      {{ volume_ro('nextmn/routes-to-nei.sh', '/usr/local/bin/routes-to-nei.sh') }}
      - srgw0_db_volume:/var/run/postgresql/
    environment:
      LOG_LEVEL: "{{ log_level() }}"
      NEI_ADDR: "{{ ipv6_subnet('r0') }} {{ ipv6_subnet('r1') }}"
      NEI_NH: "{{ ipv6('r0', 'dataplane') }} {{ ipv6('r1', 'dataplane') }}"
      HOOKS: |-
        pre-init-hook: remove-default-routes.sh
        post-init-hook: routes-to-nei.sh
      HTTP_ADDRESS: "{{ ipv6('srgw0', 'control') }}"
      HTTP_PORT: "8080"
      CONTROLLER_URI: "http://[{{ ipv6('srv6-ctrl', 'control') }}]:8080"
      GIN_MODE: "release"
      BACKBONE_IP: "{{ ipv6('srgw0', 'dataplane') }}"
      LOCATOR: "{{ ipv6_subnet('srgw0') }}"
      GTP4_HEADEND_PREFIX: "{{ ipv4('srgw0', 'srgw0') }}/32"
      HEADENDS: |-
        - name: "srgw0 uplink (controlled)"
          to: "{{ ipv4('srgw0', 'srgw0') }}/32"
          provider: "NextMN-Ctrl"
          behavior: "H.M.GTP4.D"
          source-address-prefix: "{{ ipv6_prefix('end-m-gtp4-e', 'srgw0') }}"
      ENDPOINTS: |-
        - prefix: "{{ ipv6_prefix('end-m-gtp4-e', 'srgw0') }}"
          provider: "NextMN"
          behavior: "End.M.GTP4.E"
      POSTGRES_PASSWORD_FILE: /run/secrets/srgw0_db_password
      POSTGRES_HOST: "srgw0-db.nextmndb"
      POSTGRES_UNIX_SOCKET_PATH: "/var/run/postgresql/"
    secrets:
      - srgw0_db_password
    networks:
      control:
        ipv4_address: "{{ ipv4('srgw0', 'control') }}"
        ipv6_address: "{{ ipv6('srgw0', 'control') }}"
      dataplane:
        ipv4_address: "{{ ipv4('srgw0', 'dataplane') }}"
        ipv6_address: "{{ ipv6('srgw0', 'dataplane') }}"
      nextmndb:

  {{ container_s(name='srgw0-db', image='docker.io/library/postgres', restart='always', command=False) }}
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "postgres", "-d", "postgres"]
      start_interval: 1s
      start_period: 10s
      interval: 10s
      timeout: 5s
      retries: 5
    secrets:
      - srgw0_db_password
    environment:
      POSTGRES_PASSWORD_FILE: /run/secrets/srgw0_db_password
    volumes:
      - srgw0_db_volume:/var/run/postgresql/
    networks:
      nextmndb:

  #~ if config["topology"]["nb_gnb"] > 2
  {{ container_s(name='srgw1', image='docker.io/louisroyer/dev-nextmn-srv6', image_build='https://github.com/louisroyer-docker/nextmn.git#master:srv6', restart='always', srv6=True, debug='allow' ) }}
    depends_on:
      srv6-ctrl:
        condition: service_healthy
      srgw1-db:
        condition: service_healthy
    volumes:
      {{ volume_ro('nextmn/routes-to-nei.sh', '/usr/local/bin/routes-to-nei.sh') }}
      - srgw1_db_volume:/var/run/postgresql/
    environment:
      LOG_LEVEL: "{{ log_level() }}"
      NEI_ADDR: "{{ ipv6_subnet('r2') }}"
      NEI_NH: "{{ ipv6('r2', 'dataplane') }}"
      HOOKS: |-
        pre-init-hook: remove-default-routes.sh
        post-init-hook: routes-to-nei.sh
      HTTP_ADDRESS: "{{ ipv6('srgw1', 'control') }}"
      HTTP_PORT: "8080"
      CONTROLLER_URI: "http://[{{ ipv6('srv6-ctrl', 'control') }}]:8080"
      GIN_MODE: "release"
      BACKBONE_IP: "{{ ipv6('srgw1', 'dataplane') }}"
      LOCATOR: "{{ ipv6_subnet('srgw1') }}"
      GTP4_HEADEND_PREFIX: "{{ ipv4('srgw1', 'srgw1') }}/32"
      HEADENDS: |-
        - name: "srgw1 uplink (controlled)"
          to: "{{ ipv4('srgw1', 'srgw1') }}/32"
          provider: "NextMN-Ctrl"
          behavior: "H.M.GTP4.D"
          source-address-prefix: "{{ ipv6_prefix('end-m-gtp4-e', 'srgw1') }}"
      ENDPOINTS: |-
        - prefix: "{{ ipv6_prefix('end-m-gtp4-e', 'srgw1') }}"
          provider: "NextMN"
          behavior: "End.M.GTP4.E"
      POSTGRES_PASSWORD_FILE: /run/secrets/srgw1_db_password
      POSTGRES_HOST: "srgw1-db.nextmndb"
      POSTGRES_UNIX_SOCKET_PATH: "/var/run/postgresql/"
    secrets:
      - srgw1_db_password
    networks:
      control:
        ipv4_address: "{{ ipv4('srgw1', 'control') }}"
        ipv6_address: "{{ ipv6('srgw1', 'control') }}"
      dataplane:
        ipv4_address: "{{ ipv4('srgw1', 'dataplane') }}"
        ipv6_address: "{{ ipv6('srgw1', 'dataplane') }}"
      nextmndb:

  {{ container_s(name='srgw1-db', image='docker.io/library/postgres', restart='always', command=False) }}
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "postgres", "-d", "postgres"]
      start_interval: 1s
      start_period: 10s
      interval: 10s
      timeout: 5s
      retries: 5
    secrets:
      - srgw1_db_password
    environment:
      POSTGRES_PASSWORD_FILE: /run/secrets/srgw1_db_password
    volumes:
      - srgw1_db_volume:/var/run/postgresql/
    networks:
      nextmndb:
  #~ endif

  {{ container_s(name='srv6-ctrl', image='docker.io/louisroyer/dev-nextmn-srv6-ctrl', image_build='https://github.com/louisroyer-docker/nextmn.git#master:srv6-ctrl', debug='allow', restart='always') }}
    environment:
      N4: "{{ ipv4('srv6-ctrl', 'control') }}"
      HTTP_ADDRESS: "{{ ipv6('srv6-ctrl', 'control') }}"
      HTTP_PORT: "8080"
      LOG_LEVEL: "{{ log_level() }}"
      GIN_MODE: "release"
      DOWNLINK: |-
        - control-uri: "http://[{{ ipv6('r0', 'control') }}]:8080"
          enabled: true
          area:
  #~ if config["topology"]["controlplane"] == "free5gc"
            - "{{ ipv4('gnb1', 'dataplane') }}/32"
    #~ if config["topology"]["nb_gnb"] > 1
            - "{{ ipv4('gnb2', 'dataplane') }}/32"
    #~ endif
  #~ endif
  #~ if config["topology"]["controlplane"] == "nextmn-lite"
            - "{{ ipv4('gnbl1', 'dataplane') }}/32"
    #~ if config["topology"]["nb_gnb"] > 1
            - "{{ ipv4('gnbl2', 'dataplane') }}/32"
    #~ endif
  #~ endif
          srgw-gtp4: "{{ ipv4('srgw0', 'srgw0') }}"
          segments-list:
            - "{{ ipv6_prefix('end-m-gtp4-e', 'srgw0') }}"
  #~ if config["topology"]["nb_edges"] > 1
        - control-uri: "http://[{{ ipv6('r1', 'control') }}]:8080"
          enabled: true
          area:
  #~ if config["topology"]["controlplane"] == "free5gc"
            - "{{ ipv4('gnb1', 'dataplane') }}/32"
    #~ if config["topology"]["nb_gnb"] > 1
            - "{{ ipv4('gnb2', 'dataplane') }}/32"
    #~ endif
  #~ endif
  #~ if config["topology"]["controlplane"] == "nextmn-lite"
            - "{{ ipv4('gnbl1', 'dataplane') }}/32"
    #~ if config["topology"]["nb_gnb"] > 1
            - "{{ ipv4('gnbl2', 'dataplane') }}/32"
    #~ endif
  #~ endif
          srgw-gtp4: "{{ ipv4('srgw0', 'srgw0') }}"
          segments-list:
            - "{{ ipv6_prefix('end-m-gtp4-e', 'srgw0') }}"
  #~ endif
  #~ if config["topology"]["nb_edges"] > 2
        - control-uri: "http://[{{ ipv6('r2', 'control') }}]:8080"
          enabled: true
          area:
            - "{{ ipv4('gnbl3', 'dataplane') }}/32"
          srgw-gtp4: "{{ ipv4('srgw1', 'srgw1') }}"
          segments-list:
            - "{{ ipv6_prefix('end-m-gtp4-e', 'srgw1') }}"
  #~ endif
      UPLINK: |-
        - control-uri: "http://[{{ ipv6('srgw0', 'control') }}]:8080"
          enabled: true
          service: "{{ ipv4('s', 'service') }}"
          area:
  #~ if config["topology"]["controlplane"] == "free5gc"
            - "{{ ipv4('gnb1', 'dataplane') }}/32"
    #~ if config["topology"]["nb_gnb"] > 1
            - "{{ ipv4('gnb2', 'dataplane') }}/32"
    #~ endif
  #~ endif
  #~ if config["topology"]["controlplane"] == "nextmn-lite"
            - "{{ ipv4('gnbl1', 'dataplane') }}/32"
    #~ if config["topology"]["nb_gnb"] > 1
            - "{{ ipv4('gnbl2', 'dataplane') }}/32"
    #~ endif
  #~ endif
          segments-list:
            - "{{ ipv6('end-dx4', 'r0') }}"
#~ if config["topology"]["nb_edges"] > 1
        - control-uri: "http://[{{ ipv6('srgw0', 'control') }}]:8080"
          enabled: false
          service: "{{ ipv4('s', 'service') }}"
          area:
  #~ if config["topology"]["controlplane"] == "free5gc"
            - "{{ ipv4('gnb1', 'dataplane') }}/32"
    #~ if config["topology"]["nb_gnb"] > 1
            - "{{ ipv4('gnb2', 'dataplane') }}/32"
    #~ endif
  #~ endif
  #~ if config["topology"]["controlplane"] == "nextmn-lite"
            - "{{ ipv4('gnbl1', 'dataplane') }}/32"
    #~ if config["topology"]["nb_gnb"] > 1
            - "{{ ipv4('gnbl2', 'dataplane') }}/32"
    #~ endif
  #~ endif
          segments-list:
            - "{{ ipv6('end-dx4', 'r1') }}"
  #~ if (config["topology"]["nb_gnb"] > 2) and (config["topology"]["nb_edges"] > 2) and (config["topology"]["controlplane"] == "nextmn-lite")
        - control-uri: "http://[{{ ipv6('srgw1', 'control') }}]:8080"
          enabled: true
          service: "{{ ipv4('s', 'service') }}"
          area:
            - "{{ ipv4('gnbl3', 'dataplane') }}/32"
          segments-list:
            - "{{ ipv6('end-dx4', 'r2') }}"
  #~ endif
#~ endif
    networks:
      control:
        ipv4_address: "{{ ipv4('srv6-ctrl', 'control') }}"
        ipv6_address: "{{ ipv6('srv6-ctrl', 'control') }}"
#~ endif

  {{ container_setup_s(name='s0') }}
    environment:
      ONESHOT: "true"
      ROUTES_INIT: |-
#~ if "nextmn-srv6" in config["topology"]["dataplane"]
        - add {{ ipv4_subnet('slice0') }} via {{ ipv4('r0', 'edge') }}
#~ endif
#~ if "free5gc" in config["topology"]["dataplane"]
        - add {{ ipv4_subnet('slice1') }} via {{ ipv4('upfa1-f5gc', 'edge') }}
#~ endif
#~ if "nextmn-upf" in config["topology"]["dataplane"]
        - add {{ ipv4_subnet('slice2') }} via {{ ipv4('upfa1-nmn', 'edge') }}
#~ endif
      PRE_INIT_HOOK: "ip"
      PRE_INIT_HOOK_0: "addr"
      PRE_INIT_HOOK_1: "add"
      PRE_INIT_HOOK_2: "{{ ipv4('s', 'service') }}"
      PRE_INIT_HOOK_3: "dev"
      PRE_INIT_HOOK_4: "edge-0"
  {{ container_s(name='s0', image='docker.io/library/nginx', command=False, debug='always') }}
    volumes:
      {{ volume_ro('nginx/instance.conf.template', '/etc/nginx/templates/instance.conf.template') }}
    environment:
      NGINX_PORT: "80"
      NGINX_SERVICE_ID: "{{ ipv4('s', 'service') }}"
      NGINX_INSTANCE_ID: "{{ ipv4('s0', 'edge') }}"
    networks:
      edge:
        ipv4_address: "{{ ipv4('s0', 'edge') }}"

  {{ container_setup_s(name='s1') }}
    environment:
      ONESHOT: "true"
      ROUTES_INIT: |-
#~ if "nextmn-srv6" in config["topology"]["dataplane"]
        - add {{ ipv4_subnet('slice0') }} via {{ ipv4('r1', 'edge') }}
#~ endif
#~ if "free5gc" in config["topology"]["dataplane"]
        - add {{ ipv4_subnet('slice1') }} via {{ ipv4('upfa2-f5gc', 'edge') }}
#~ endif
#~ if "nextmn-upf" in config["topology"]["dataplane"]
        - add {{ ipv4_subnet('slice2') }} via {{ ipv4('upfa2-nmn', 'edge') }}
#~ endif
      PRE_INIT_HOOK: "ip"
      PRE_INIT_HOOK_0: "addr"
      PRE_INIT_HOOK_1: "add"
      PRE_INIT_HOOK_2: "{{ ipv4('s', 'service') }}"
      PRE_INIT_HOOK_3: "dev"
      PRE_INIT_HOOK_4: "edge-0"
  {{ container_s(name='s1', image='docker.io/library/nginx', command=False, debug='always') }}
    volumes:
      {{ volume_ro('nginx/instance.conf.template', '/etc/nginx/templates/instance.conf.template') }}
    environment:
      NGINX_PORT: "80"
      NGINX_SERVICE_ID: "{{ ipv4('s', 'service') }}"
      NGINX_INSTANCE_ID: "{{ ipv4('s1', 'edge') }}"
    networks:
      edge:
        ipv4_address: "{{ ipv4('s1', 'edge') }}"

#~ if config["topology"]["nb_edges"] > 2
  {{ container_setup_s(name='s2') }}
    environment:
      ONESHOT: "true"
      ROUTES_INIT: |-
  #~ if "nextmn-srv6" in config["topology"]["dataplane"]
        - add {{ ipv4_subnet('slice0') }} via {{ ipv4('r2', 'edge') }}
  #~ endif
  #~ if "free5gc" in config["topology"]["dataplane"]
        - add {{ ipv4_subnet('slice1') }} via {{ ipv4('upfa3-f5gc', 'edge') }}
  #~ endif
  #~ if "nextmn-upf" in config["topology"]["dataplane"]
        - add {{ ipv4_subnet('slice2') }} via {{ ipv4('upfa3-nmn', 'edge') }}
  #~ endif
      PRE_INIT_HOOK: "ip"
      PRE_INIT_HOOK_0: "addr"
      PRE_INIT_HOOK_1: "add"
      PRE_INIT_HOOK_2: "{{ ipv4('s', 'service') }}"
      PRE_INIT_HOOK_3: "dev"
      PRE_INIT_HOOK_4: "edge-0"
  {{ container_s(name='s2', image='docker.io/library/nginx', command=False, debug='always') }}
    volumes:
      {{ volume_ro('nginx/instance.conf.template', '/etc/nginx/templates/instance.conf.template') }}
    environment:
      NGINX_PORT: "80"
      NGINX_SERVICE_ID: "{{ ipv4('s', 'service') }}"
      NGINX_INSTANCE_ID: "{{ ipv4('s2', 'edge') }}"
    networks:
      edge:
        ipv4_address: "{{ ipv4('s2', 'edge') }}"
#~ endif

#~ if "free5gc" in config["topology"]["dataplane"]
  {{ container_s(name='upfi1-f5gc', image='docker.io/louisroyer/dev-free5gc-upf', image_build='https://github.com/louisroyer-docker/free5gc.git#master:upf', restart='always', cap_net_admin=True, debug='allow') }}
    environment:
      LOG_LEVEL: "{{ log_level() }}"
      LOG_REPORT_CALLER: "{{ log_report_caller() }}"
      N4: "{{ ipv4('upfi1-f5gc', 'control') }}"
      IF_LIST: |-
        - addr: "{{ ipv4('upfi1-f5gc', 'dataplane') }}"
          type: N3
        - addr: "{{ ipv4('upfi1-f5gc', 'dataplane') }}"
          type: N9
      DNN_LIST: |-
        - dnn: free5gc
          cidr: {{ ipv4_subnet('slice1') }}
    networks:
      control:
        ipv4_address: "{{ ipv4('upfi1-f5gc', 'control') }}"
      dataplane:
        ipv4_address: "{{ ipv4('upfi1-f5gc', 'dataplane') }}"
  #~ if config["topology"]["nb_gnb"] > 2
  {{ container_s(name='upfi2-f5gc', image='docker.io/louisroyer/dev-free5gc-upf', image_build='https://github.com/louisroyer-docker/free5gc.git#master:upf', restart='always', cap_net_admin=True, debug='allow') }}
    environment:
      LOG_LEVEL: "{{ log_level() }}"
      LOG_REPORT_CALLER: "{{ log_report_caller() }}"
      N4: "{{ ipv4('upfi2-f5gc', 'control') }}"
      IF_LIST: |-
        - addr: "{{ ipv4('upfi2-f5gc', 'dataplane') }}"
          type: N3
        - addr: "{{ ipv4('upfi2-f5gc', 'dataplane') }}"
          type: N9
      DNN_LIST: |-
        - dnn: free5gc
          cidr: {{ ipv4_subnet('slice1') }}
    networks:
      control:
        ipv4_address: "{{ ipv4('upfi2-f5gc', 'control') }}"
      dataplane:
        ipv4_address: "{{ ipv4('upfi2-f5gc', 'dataplane') }}"
  #~ endif
  {{ container_s(name='upfa1-f5gc', image='docker.io/louisroyer/dev-free5gc-upf', image_build='https://github.com/louisroyer-docker/free5gc.git#master:upf', restart='always', cap_net_admin=True, debug='allow') }}
    environment:
      LOG_LEVEL: "{{ log_level() }}"
      LOG_REPORT_CALLER: "{{ log_report_caller() }}"
      N4: "{{ ipv4('upfa1-f5gc', 'control') }}"
      IF_LIST: |-
        - addr: "{{ ipv4('upfa1-f5gc', 'dataplane') }}"
          type: N9
      DNN_LIST: |-
        - dnn: free5gc
          cidr: {{ ipv4_subnet('slice1') }}
      ROUTES_INIT: |-
        - add {{ ipv4('s', 'service') }} via {{ ipv4('s0', 'edge') }}
    networks:
      control:
        ipv4_address: "{{ ipv4('upfa1-f5gc', 'control') }}"
      dataplane:
        ipv4_address: "{{ ipv4('upfa1-f5gc', 'dataplane') }}"
      edge:
        ipv4_address: "{{ ipv4('upfa1-f5gc', 'edge') }}"
  #~ if config["topology"]["nb_edges"] > 1
  {{ container_s(name='upfa2-f5gc', image='docker.io/louisroyer/dev-free5gc-upf', image_build='https://github.com/louisroyer-docker/free5gc.git#master:upf', restart='always', cap_net_admin=True, debug='allow') }}
    environment:
      LOG_LEVEL: "{{ log_level() }}"
      LOG_REPORT_CALLER: "{{ log_report_caller() }}"
      N4: "{{ ipv4('upfa2-f5gc', 'control') }}"
      IF_LIST: |-
        - addr: "{{ ipv4('upfa2-f5gc', 'dataplane') }}"
          type: N9
      DNN_LIST: |-
        - dnn: free5gc
          cidr: {{ ipv4_subnet('slice1') }}
      ROUTES_INIT: |-
        - add {{ ipv4('s', 'service') }} via {{ ipv4('s1', 'edge') }}
    networks:
      control:
        ipv4_address: "{{ ipv4('upfa2-f5gc', 'control') }}"
      dataplane:
        ipv4_address: "{{ ipv4('upfa2-f5gc', 'dataplane') }}"
      edge:
        ipv4_address: "{{ ipv4('upfa2-f5gc', 'edge') }}"
  #~ endif
  #~ if config["topology"]["nb_edges"] > 2
  {{ container_s(name='upfa3-f5gc', image='docker.io/louisroyer/dev-free5gc-upf', image_build='https://github.com/louisroyer-docker/free5gc.git#master:upf', restart='always', cap_net_admin=True, debug='allow') }}
    environment:
      LOG_LEVEL: "{{ log_level() }}"
      LOG_REPORT_CALLER: "{{ log_report_caller() }}"
      N4: "{{ ipv4('upfa3-f5gc', 'control') }}"
      IF_LIST: |-
        - addr: "{{ ipv4('upfa3-f5gc', 'dataplane') }}"
          type: N9
      DNN_LIST: |-
        - dnn: free5gc
          cidr: {{ ipv4_subnet('slice1') }}
      ROUTES_INIT: |-
        - add {{ ipv4('s', 'service') }} via {{ ipv4('s2', 'edge') }}
    networks:
      control:
        ipv4_address: "{{ ipv4('upfa3-f5gc', 'control') }}"
      dataplane:
        ipv4_address: "{{ ipv4('upfa3-f5gc', 'dataplane') }}"
      edge:
        ipv4_address: "{{ ipv4('upfa3-f5gc', 'edge') }}"
  #~ endif
#~ endif

#~ if "nextmn-upf" in config["topology"]["dataplane"]
  {{ container_s(name='upfi1-nmn', image='docker.io/louisroyer/dev-nextmn-upf', image_build='https://github.com/louisroyer-docker/nextmn.git#master:upf', restart='always', iface_tun=True, ipv4_forward=True, cap_net_admin=True, debug='allow') }}
    environment:
      N4: "{{ ipv4('upfi1-nmn', 'control') }}"
      IF_LIST: |-
        - addr: "{{ ipv4('upfi1-nmn', 'dataplane') }}"
          type: N3
        - addr: "{{ ipv4('upfi1-nmn', 'dataplane') }}"
          type: N9
      DNN_LIST: |-
        - dnn: nextmn-upf
          cidr: {{ ipv4_subnet('slice2') }}
      LOG_LEVEL: "{{ log_level() }}"
    networks:
      control:
        ipv4_address: "{{ ipv4('upfi1-nmn', 'control') }}"
      dataplane:
        ipv4_address: "{{ ipv4('upfi1-nmn', 'dataplane') }}"
  #~ if config["topology"]["nb_gnb"] > 2
  {{ container_s(name='upfi2-nmn', image='docker.io/louisroyer/dev-nextmn-upf', image_build='https://github.com/louisroyer-docker/nextmn.git#master:upf', restart='always', iface_tun=True, ipv4_forward=True, cap_net_admin=True, debug='allow') }}
    environment:
      N4: "{{ ipv4('upfi2-nmn', 'control') }}"
      IF_LIST: |-
        - addr: "{{ ipv4('upfi2-nmn', 'dataplane') }}"
          type: N3
        - addr: "{{ ipv4('upfi2-nmn', 'dataplane') }}"
          type: N9
      DNN_LIST: |-
        - dnn: nextmn-upf
          cidr: {{ ipv4_subnet('slice2') }}
      LOG_LEVEL: "{{ log_level() }}"
    networks:
      control:
        ipv4_address: "{{ ipv4('upfi2-nmn', 'control') }}"
      dataplane:
        ipv4_address: "{{ ipv4('upfi2-nmn', 'dataplane') }}"
  #~ endif
  {{ container_s(name='upfa1-nmn', image='docker.io/louisroyer/dev-nextmn-upf', image_build='https://github.com/louisroyer-docker/nextmn.git#master:upf', restart='always', iface_tun=True, ipv4_forward=True, cap_net_admin=True, debug='allow') }}
    environment:
      N4: "{{ ipv4('upfa1-nmn', 'control') }}"
      IF_LIST: |-
        - addr: "{{ ipv4('upfa1-nmn', 'dataplane') }}"
          type: N9
      DNN_LIST: |-
        - dnn: nextmn-upf
          cidr: {{ ipv4_subnet('slice2') }}
      ROUTES_INIT: |-
        - add {{ ipv4('s', 'service') }} via {{ ipv4('s0', 'edge') }}
      LOG_LEVEL: "{{ log_level() }}"
    networks:
      control:
        ipv4_address: "{{ ipv4('upfa1-nmn', 'control') }}"
      dataplane:
        ipv4_address: "{{ ipv4('upfa1-nmn', 'dataplane') }}"
      edge:
        ipv4_address: "{{ ipv4('upfa1-nmn', 'edge') }}"
  #~ if config["topology"]["nb_edges"] > 1
  {{ container_s(name='upfa2-nmn', image='docker.io/louisroyer/dev-nextmn-upf', image_build='https://github.com/louisroyer-docker/nextmn.git#master:upf', restart='always', iface_tun=True, ipv4_forward=True, cap_net_admin=True, debug='allow') }}
    environment:
      N4: "{{ ipv4('upfa2-nmn', 'control') }}"
      IF_LIST: |-
        - addr: "{{ ipv4('upfa2-nmn', 'dataplane') }}"
          type: N9
      DNN_LIST: |-
        - dnn: nextmn-upf
          cidr: {{ ipv4_subnet('slice2') }}
      ROUTES_INIT: |-
        - add {{ ipv4('s', 'service') }} via {{ ipv4('s1', 'edge') }}
      LOG_LEVEL: "{{ log_level() }}"
    networks:
      control:
        ipv4_address: "{{ ipv4('upfa2-nmn', 'control') }}"
      dataplane:
        ipv4_address: "{{ ipv4('upfa2-nmn', 'dataplane') }}"
      edge:
        ipv4_address: "{{ ipv4('upfa2-nmn', 'edge') }}"
  #~ endif
  #~ if config["topology"]["nb_edges"] > 2
  {{ container_s(name='upfa3-nmn', image='docker.io/louisroyer/dev-nextmn-upf', image_build='https://github.com/louisroyer-docker/nextmn.git#master:upf', restart='always', iface_tun=True, ipv4_forward=True, cap_net_admin=True, debug='allow') }}
    environment:
      N4: "{{ ipv4('upfa3-nmn', 'control') }}"
      IF_LIST: |-
        - addr: "{{ ipv4('upfa3-nmn', 'dataplane') }}"
          type: N9
      DNN_LIST: |-
        - dnn: nextmn-upf
          cidr: {{ ipv4_subnet('slice2') }}
      ROUTES_INIT: |-
        - add {{ ipv4('s', 'service') }} via {{ ipv4('s2', 'edge') }}
      LOG_LEVEL: "{{ log_level() }}"
    networks:
      control:
        ipv4_address: "{{ ipv4('upfa3-nmn', 'control') }}"
      dataplane:
        ipv4_address: "{{ ipv4('upfa3-nmn', 'dataplane') }}"
      edge:
        ipv4_address: "{{ ipv4('upfa3-nmn', 'edge') }}"
  #~ endif
#~ endif

#~ if config["topology"]["controlplane"] == "nextmn-lite"
  #~ if "nextmn-srv6" in config["topology"]["dataplane"]
  {{ container_s(name='uel1', image='docker.io/louisroyer/dev-nextmn-ue-lite', image_build='https://github.com/louisroyer-docker/nextmn.git#master:ue-lite', enable_ipv6=True, debug='always', debug_volume=False, iface_tun=True, cap_net_admin=True) }}
    depends_on:
      gnbl1:
        condition: service_started
    #~ if config["topology"]["ran"]["handover"]
      gnbl2:
        condition: service_started
      #~ if config["topology"]["nb_gnb"] > 2
      gnbl3:
        condition: service_started
      #~ endif
    #~ endif
    environment:
      GIN_MODE: "release"
      HTTP_ADDRESS: "{{ ipv6('uel1', 'control') }}"
      HTTP_PORT: "8080"
      RAN: |-
        bind-addr: "[{{ ipv6('uel1', 'ran') }}]:1234"
        gnbs:
          - "http://[{{ ipv6('gnbl1', 'control') }}]:8080"
    #~ if config["topology"]["ran"]["handover"]
          - "http://[{{ ipv6('gnbl2', 'control') }}]:8080"
      #~ if config["topology"]["nb_gnb"] > 2
          - "http://[{{ ipv6('gnbl3', 'control') }}]:8080"
      #~ endif
    #~ endif
        pdu-sessions:
          - gnb: "http://[{{ ipv6('gnbl1', 'control') }}]:8080"
            dnn: "srv6"
      LOG_LEVEL: "{{ log_level() }}"
    networks:
      ran:
        ipv4_address: "{{ ipv4('uel1', 'ran') }}"
        ipv6_address: "{{ ipv6('uel1', 'ran') }}"
      control:
        ipv4_address: "{{ ipv4('uel1', 'control') }}"
        ipv6_address: "{{ ipv6('uel1', 'control') }}"

    #~ if config["topology"]["nb_ue"] > 1
  {{ container_s(name='uel2', image='docker.io/louisroyer/dev-nextmn-ue-lite', image_build='https://github.com/louisroyer-docker/nextmn.git#master:ue-lite', enable_ipv6=True, debug='always', debug_volume=False, iface_tun=True, cap_net_admin=True) }}
    depends_on:
      gnbl2:
        condition: service_started
    environment:
      GIN_MODE: "release"
      HTTP_ADDRESS: "{{ ipv6('uel2', 'control') }}"
      HTTP_PORT: "8080"
      RAN: |-
        bind-addr: "[{{ ipv6('uel2', 'ran') }}]:1234"
        gnbs:
          - "http://[{{ ipv6('gnbl2', 'control') }}]:8080"
        pdu-sessions:
          - gnb: "http://[{{ ipv6('gnbl2', 'control') }}]:8080"
            dnn: "srv6"
      LOG_LEVEL: "{{ log_level() }}"
    networks:
      ran:
        ipv4_address: "{{ ipv4('uel2', 'ran') }}"
        ipv6_address: "{{ ipv6('uel2', 'ran') }}"
      control:
        ipv4_address: "{{ ipv4('uel2', 'control') }}"
        ipv6_address: "{{ ipv6('uel2', 'control') }}"
    #~ endif
  #~ endif
  #~ if "free5gc" in config["topology"]["dataplane"]
  {{ container_s(name='uel3', image='docker.io/louisroyer/dev-nextmn-ue-lite', image_build='https://github.com/louisroyer-docker/nextmn.git#master:ue-lite', enable_ipv6=True, debug='always', debug_volume=False, iface_tun=True, cap_net_admin=True) }}
    depends_on:
      gnbl1:
        condition: service_started
    #~ if config["topology"]["ran"]["handover"]
      gnbl2:
        condition: service_started
      #~ if config["topology"]["nb_gnb"] > 2
      gnbl3:
        condition: service_started
      #~ endif
    #~ endif
    environment:
      GIN_MODE: "release"
      HTTP_ADDRESS: "{{ ipv6('uel3', 'control') }}"
      HTTP_PORT: "8080"
      RAN: |-
        bind-addr: "[{{ ipv6('uel3', 'ran') }}]:1234"
        gnbs:
          - "http://[{{ ipv6('gnbl1', 'control') }}]:8080"
    #~ if config["topology"]["ran"]["handover"]
          - "http://[{{ ipv6('gnbl2', 'control') }}]:8080"
      #~ if config["topology"]["nb_gnb"] > 2
          - "http://[{{ ipv6('gnbl3', 'control') }}]:8080"
      #~ endif
    #~ endif
        pdu-sessions:
          - gnb: "http://[{{ ipv6('gnbl1', 'control') }}]:8080"
            dnn: "free5gc"
      LOG_LEVEL: "{{ log_level() }}"
    networks:
      ran:
        ipv4_address: "{{ ipv4('uel3', 'ran') }}"
        ipv6_address: "{{ ipv6('uel3', 'ran') }}"
      control:
        ipv4_address: "{{ ipv4('uel3', 'control') }}"
        ipv6_address: "{{ ipv6('uel3', 'control') }}"

    #~ if config["topology"]["nb_ue"] > 1
  {{ container_s(name='uel4', image='docker.io/louisroyer/dev-nextmn-ue-lite', image_build='https://github.com/louisroyer-docker/nextmn.git#master:ue-lite', enable_ipv6=True, debug='always', debug_volume=False, iface_tun=True, cap_net_admin=True) }}
    depends_on:
      gnbl2:
        condition: service_started
    environment:
      GIN_MODE: "release"
      HTTP_ADDRESS: "{{ ipv6('uel4', 'control') }}"
      HTTP_PORT: "8080"
      RAN: |-
        bind-addr: "[{{ ipv6('uel4', 'ran') }}]:1234"
        gnbs:
          - "http://[{{ ipv6('gnbl2', 'control') }}]:8080"
        pdu-sessions:
          - gnb: "http://[{{ ipv6('gnbl2', 'control') }}]:8080"
            dnn: "free5gc"
      LOG_LEVEL: "{{ log_level() }}"
    networks:
      ran:
        ipv4_address: "{{ ipv4('uel4', 'ran') }}"
        ipv6_address: "{{ ipv6('uel4', 'ran') }}"
      control:
        ipv4_address: "{{ ipv4('uel4', 'control') }}"
        ipv6_address: "{{ ipv6('uel4', 'control') }}"
    #~ endif
  #~ endif
  #~ if "nextmn-upf" in config["topology"]["dataplane"]
  {{ container_s(name='uel5', image='docker.io/louisroyer/dev-nextmn-ue-lite', image_build='https://github.com/louisroyer-docker/nextmn.git#master:ue-lite', enable_ipv6=True, debug='always', debug_volume=False, iface_tun=True, cap_net_admin=True) }}
    depends_on:
      gnbl1:
        condition: service_started
    #~ if config["topology"]["ran"]["handover"]
      gnbl2:
        condition: service_started
      #~ if config["topology"]["nb_gnb"] > 2
      gnbl3:
        condition: service_started
      #~ endif
    #~ endif
    environment:
      GIN_MODE: "release"
      HTTP_ADDRESS: "{{ ipv6('uel5', 'control') }}"
      HTTP_PORT: "8080"
      RAN: |-
        bind-addr: "[{{ ipv6('uel5', 'ran') }}]:1234"
        gnbs:
          - "http://[{{ ipv6('gnbl1', 'control') }}]:8080"
    #~ if config["topology"]["ran"]["handover"]
          - "http://[{{ ipv6('gnbl2', 'control') }}]:8080"
      #~ if config["topology"]["nb_gnb"] > 2
          - "http://[{{ ipv6('gnbl3', 'control') }}]:8080"
      #~ endif
    #~ endif
        pdu-sessions:
          - gnb: "http://[{{ ipv6('gnbl1', 'control') }}]:8080"
            dnn: "nextmn-upf"
      LOG_LEVEL: "{{ log_level() }}"
    networks:
      ran:
        ipv4_address: "{{ ipv4('uel5', 'ran') }}"
        ipv6_address: "{{ ipv6('uel5', 'ran') }}"
      control:
        ipv4_address: "{{ ipv4('uel5', 'control') }}"
        ipv6_address: "{{ ipv6('uel5', 'control') }}"

    #~ if config["topology"]["nb_ue"] > 1
  {{ container_s(name='uel6', image='docker.io/louisroyer/dev-nextmn-ue-lite', image_build='https://github.com/louisroyer-docker/nextmn.git#master:ue-lite', enable_ipv6=True, debug='always', debug_volume=False, iface_tun=True, cap_net_admin=True) }}
    depends_on:
      gnbl2:
        condition: service_started
    environment:
      GIN_MODE: "release"
      HTTP_ADDRESS: "{{ ipv6('uel6', 'control') }}"
      HTTP_PORT: "8080"
      RAN: |-
        bind-addr: "[{{ ipv6('uel6', 'ran') }}]:1234"
        gnbs:
          - "http://[{{ ipv6('gnbl2', 'control') }}]:8080"
        pdu-sessions:
          - gnb: "http://[{{ ipv6('gnbl2', 'control') }}]:8080"
            dnn: "nextmn-upf"
      LOG_LEVEL: "{{ log_level() }}"
    networks:
      ran:
        ipv4_address: "{{ ipv4('uel6', 'ran') }}"
        ipv6_address: "{{ ipv6('uel6', 'ran') }}"
      control:
        ipv4_address: "{{ ipv4('uel6', 'control') }}"
        ipv6_address: "{{ ipv6('uel6', 'control') }}"
    #~ endif
  #~ endif

  {{ container_s(name='gnbl1', image='docker.io/louisroyer/dev-nextmn-gnb-lite', image_build='https://github.com/louisroyer-docker/nextmn.git#master:gnb-lite', enable_ipv6=True, debug='always', debug_volume=False, cap_net_admin=True) }}
    depends_on:
      cp-lite:
        condition: service_started
    environment:
      GIN_MODE: "release"
      HTTP_ADDRESS: "{{ ipv6('gnbl1', 'control') }}"
      HTTP_PORT: "8080"
      CP: "http://[{{ ipv6('cp-lite', 'control') }}]:8080"
      N3: "{{ ipv4('gnbl1', 'dataplane') }}"
      RAN: |-
        bind-addr: "[{{ ipv6('gnbl1', 'ran') }}]:1234"
      LOG_LEVEL: "{{ log_level() }}"
      ROUTES_INIT: |-
        - add {{ ipv4('srgw0', 'srgw0') }} via {{ ipv4('srgw0', 'dataplane') }}
    networks:
      ran:
        ipv4_address: "{{ ipv4('gnbl1', 'ran') }}"
        ipv6_address: "{{ ipv6('gnbl1', 'ran') }}"
      control:
        ipv4_address: "{{ ipv4('gnbl1', 'control') }}"
        ipv6_address: "{{ ipv6('gnbl1', 'control') }}"
      dataplane:
        ipv4_address: "{{ ipv4('gnbl1', 'dataplane') }}"

  {{ container_s(name='gnbl2', image='docker.io/louisroyer/dev-nextmn-gnb-lite', image_build='https://github.com/louisroyer-docker/nextmn.git#master:gnb-lite', enable_ipv6=True, debug='always', debug_volume=False, cap_net_admin=True) }}
    depends_on:
      cp-lite:
        condition: service_started
    environment:
      GIN_MODE: "release"
      HTTP_ADDRESS: "{{ ipv6('gnbl2', 'control') }}"
      HTTP_PORT: "8080"
      CP: "http://[{{ ipv6('cp-lite', 'control') }}]:8080"
      N3: "{{ ipv4('gnbl2', 'dataplane') }}"
      RAN: |-
        bind-addr: "[{{ ipv6('gnbl2', 'ran') }}]:1234"
      LOG_LEVEL: "{{ log_level() }}"
      ROUTES_INIT: |-
        - add {{ ipv4('srgw0', 'srgw0') }} via {{ ipv4('srgw0', 'dataplane') }}
    networks:
      ran:
        ipv4_address: "{{ ipv4('gnbl2', 'ran') }}"
        ipv6_address: "{{ ipv6('gnbl2', 'ran') }}"
      control:
        ipv4_address: "{{ ipv4('gnbl2', 'control') }}"
        ipv6_address: "{{ ipv6('gnbl2', 'control') }}"
      dataplane:
        ipv4_address: "{{ ipv4('gnbl2', 'dataplane') }}"

  #~ if config["topology"]["nb_gnb"] > 2
  {{ container_s(name='gnbl3', image='docker.io/louisroyer/dev-nextmn-gnb-lite', image_build='https://github.com/louisroyer-docker/nextmn.git#master:gnb-lite', enable_ipv6=True, debug='always', debug_volume=False, cap_net_admin=True) }}
    depends_on:
      cp-lite:
        condition: service_started
    environment:
      GIN_MODE: "release"
      HTTP_ADDRESS: "{{ ipv6('gnbl3', 'control') }}"
      HTTP_PORT: "8080"
      CP: "http://[{{ ipv6('cp-lite', 'control') }}]:8080"
      N3: "{{ ipv4('gnbl3', 'dataplane') }}"
      RAN: |-
        bind-addr: "[{{ ipv6('gnbl3', 'ran') }}]:1234"
      LOG_LEVEL: "{{ log_level() }}"
      ROUTES_INIT: |-
        - add {{ ipv4('srgw1', 'srgw1') }} via {{ ipv4('srgw1', 'dataplane') }}
    networks:
      ran:
        ipv4_address: "{{ ipv4('gnbl3', 'ran') }}"
        ipv6_address: "{{ ipv6('gnbl3', 'ran') }}"
      control:
        ipv4_address: "{{ ipv4('gnbl3', 'control') }}"
        ipv6_address: "{{ ipv6('gnbl3', 'control') }}"
      dataplane:
        ipv4_address: "{{ ipv4('gnbl3', 'dataplane') }}"
  #~ endif

  {{ container_s(name='cp-lite', image='docker.io/louisroyer/dev-nextmn-cp-lite', image_build='https://github.com/louisroyer-docker/nextmn.git#master:cp-lite', enable_ipv6=True, debug='allow', debug_volume=False, cap_net_admin=True) }}
    depends_on:
  #~ if "nextmn-srv6" in config["topology"]["dataplane"]
      srv6-ctrl:
        condition: service_started
      srgw0:
        condition: service_started
    #~ if config["topology"]["nb_gnb"] > 2
      srgw1:
        condition: service_started
    #~ endif
      r0:
        condition: service_started
      r1:
        condition: service_started
    #~ if config["topology"]["nb_gnb"] > 2
      r2:
        condition: service_started
    #~ endif
  #~ endif
  #~ if "free5gc" in config["topology"]["dataplane"]
      upfi1-f5gc:
        condition: service_started
    #~ if config["topology"]["nb_gnb"] > 2
      upfi2-f5gc:
        condition: service_started
    #~ endif
      upfa1-f5gc:
        condition: service_started
      upfa2-f5gc:
        condition: service_started
    #~ if config["topology"]["nb_gnb"] > 2
      upfa3-f5gc:
        condition: service_started
    #~ endif

  #~ endif
  #~ if "nextmn-upf" in config["topology"]["dataplane"]
      upfi1-nmn:
        condition: service_started
    #~ if config["topology"]["nb_gnb"] > 2
      upfi2-nmn:
        condition: service_started
    #~ endif
      upfa1-nmn:
        condition: service_started
      upfa2-nmn:
        condition: service_started
    #~ if config["topology"]["nb_gnb"] > 2
      upfa3-nmn:
        condition: service_started
    #~ endif
  #~ endif
    environment:
      GIN_MODE: "release"
      N4: "{{ ipv4('cp-lite', 'control') }}"
      HTTP_ADDRESS: "{{ ipv6('cp-lite', 'control') }}"
      HTTP_PORT: "8080"
      SLICES: |-
  #~ if "nextmn-srv6" in config["topology"]["dataplane"]
        srv6:
          pool: "{{ ipv4_subnet('slice0') }}"
          upfs:
            - node-id: "{{ ipv4('srv6-ctrl', 'control') }}"
              interfaces:
                - type: "N3"
                  addr: "{{ ipv4('srgw0', 'srgw0') }}"
    #~ if config["topology"]["nb_gnb"] > 2
                - type: "N3"
                  addr: "{{ ipv4('srgw1', 'srgw1') }}"
    #~ endif
  #~ endif
  #~ if "free5gc" in config["topology"]["dataplane"]
        free5gc:
          pool: "{{ ipv4_subnet('slice1') }}"
          upfs:
            - node-id: "{{ ipv4('upfi1-f5gc', 'control') }}"
              interfaces:
                - type: "N3"
                  addr: "{{ ipv4('upfi1-f5gc', 'dataplane') }}"
                - type: "N9"
                  addr: "{{ ipv4('upfi1-f5gc', 'dataplane') }}"
            - node-id: "{{ ipv4('upfa1-f5gc', 'control') }}"
              interfaces:
                - type: "N9"
                  addr: "{{ ipv4('upfa1-f5gc', 'dataplane') }}"
    #~ if config["topology"]["nb_gnb"] > 2
            - node-id: "{{ ipv4('upfi2-f5gc', 'control') }}"
              interfaces:
                - type: "N3"
                  addr: "{{ ipv4('upfi2-f5gc', 'dataplane') }}"
                - type: "N9"
                  addr: "{{ ipv4('upfi2-f5gc', 'dataplane') }}"
    #~ endif
    #~ if config["topology"]["nb_edges"] > 2
            - node-id: "{{ ipv4('upfa3-f5gc', 'control') }}"
              interfaces:
                - type: "N9"
                  addr: "{{ ipv4('upfa3-f5gc', 'dataplane') }}"
    #~ endif
  #~ endif
  #~ if "nextmn-upf" in config["topology"]["dataplane"]
        nextmn-upf:
          pool: "{{ ipv4_subnet('slice2') }}"
          upfs:
            - node-id: "{{ ipv4('upfi1-nmn', 'control') }}"
              interfaces:
                - type: "N3"
                  addr: "{{ ipv4('upfi1-nmn', 'dataplane') }}"
                - type: "N9"
                  addr: "{{ ipv4('upfi1-nmn', 'dataplane') }}"
            - node-id: "{{ ipv4('upfa1-nmn', 'control') }}"
              interfaces:
                - type: "N9"
                  addr: "{{ ipv4('upfa1-nmn', 'dataplane') }}"
    #~ if config["topology"]["nb_gnb"] > 2
            - node-id: "{{ ipv4('upfi2-nmn', 'control') }}"
              interfaces:
                - type: "N3"
                  addr: "{{ ipv4('upfi2-nmn', 'dataplane') }}"
                - type: "N9"
                  addr: "{{ ipv4('upfi2-nmn', 'dataplane') }}"
    #~ endif
    #~ if config["topology"]["nb_edges"] > 2
            - node-id: "{{ ipv4('upfa3-nmn', 'control') }}"
              interfaces:
                - type: "N9"
                  addr: "{{ ipv4('upfa3-nmn', 'dataplane') }}"
    #~ endif
  #~ endif
      AREAS: |-
        area1:
          gnbs:
            - "http://[{{ ipv6('gnbl1', 'control') }}]:8080"
  #~ if config["topology"]["nb_gnb"] > 1
            - "http://[{{ ipv6('gnbl2', 'control') }}]:8080"
  #~ endif
          paths:
  #~ if "nextmn-srv6" in config["topology"]["dataplane"]
            srv6:
              - node-id: "{{ ipv4('srv6-ctrl', 'control') }}"
                interface-addr: "{{ ipv4('srgw0', 'srgw0') }}"
  #~ endif
  #~ if "free5gc" in config["topology"]["dataplane"]
            free5gc:
              - node-id: "{{ ipv4('upfi1-f5gc', 'control') }}"
                interface-addr: "{{ ipv4('upfi1-f5gc', 'dataplane') }}"
              - node-id: "{{ ipv4('upfa1-f5gc', 'control') }}"
                interface-addr: "{{ ipv4('upfa1-f5gc', 'dataplane') }}"
  #~ endif
  #~ if "nextmn-upf" in config["topology"]["dataplane"]
            nextmn-upf:
              - node-id: "{{ ipv4('upfi1-nmn', 'control') }}"
                interface-addr: "{{ ipv4('upfi1-nmn', 'dataplane') }}"
              - node-id: "{{ ipv4('upfa1-nmn', 'control') }}"
                interface-addr: "{{ ipv4('upfa1-nmn', 'dataplane') }}"
  #~ endif
  #~ if (config["topology"]["nb_gnb"] > 2) and (config["topology"]["nb_edges"] > 2)
        area2:
          gnbs:
            - "http://[{{ ipv6('gnbl3', 'control') }}]:8080"
          paths:
    #~ if "nextmn-srv6" in config["topology"]["dataplane"]
            srv6:
              - node-id: "{{ ipv4('srv6-ctrl', 'control') }}"
                interface-addr: "{{ ipv4('srgw1', 'srgw1') }}"
    #~ endif
    #~ if "free5gc" in config["topology"]["dataplane"]
            free5gc:
              - node-id: "{{ ipv4('upfi2-f5gc', 'control') }}"
                interface-addr: "{{ ipv4('upfi2-f5gc', 'dataplane') }}"
              - node-id: "{{ ipv4('upfa3-f5gc', 'control') }}"
                interface-addr: "{{ ipv4('upfa3-f5gc', 'dataplane') }}"
    #~ endif
    #~ if "nextmn-upf" in config["topology"]["dataplane"]
            nextmn-upf:
              - node-id: "{{ ipv4('upfi2-nmn', 'control') }}"
                interface-addr: "{{ ipv4('upfi2-nmn', 'dataplane') }}"
              - node-id: "{{ ipv4('upfa3-nmn', 'control') }}"
                interface-addr: "{{ ipv4('upfa3-nmn', 'dataplane') }}"
    #~ endif
  #~ endif
      LOG_LEVEL: "{{ log_level() }}"
    networks:
      control:
        ipv4_address: "{{ ipv4('cp-lite', 'control') }}"
        ipv6_address: "{{ ipv6('cp-lite', 'control') }}"

#~ endif

#~ if (config["topology"]["controlplane"] == "free5gc") or ("nextmn-srv6" in config["topology"]["dataplane"])
secrets:
#~ endif
#~ if config["topology"]["controlplane"] == "free5gc"
  {{ openssl_root_s() }}
  {{ openssl_s('amf', 'sbi') }}
  {{ openssl_s('ausf', 'sbi') }}
  {{ openssl_s('chf', 'sbi') }}
  {{ openssl_s('nrf', 'sbi') }}
  {{ openssl_s('nssf', 'sbi') }}
  {{ openssl_s('pcf', 'sbi') }}
  {{ openssl_s('smf', 'sbi') }}
  {{ openssl_s('udm', 'sbi') }}
  {{ openssl_s('udr', 'sbi') }}
#~ endif
#~ if "nextmn-srv6" in config["topology"]["dataplane"]
  r0_db_password:
    file: "{{ secret('r0_db_password.txt') }}"
  r1_db_password:
    file: "{{ secret('r1_db_password.txt') }}"
  #~ if config["topology"]["nb_edges"] > 2
  r2_db_password:
    file: "{{ secret('r2_db_password.txt') }}"
  #~ endif
  srgw0_db_password:
    file: "{{ secret('srgw0_db_password.txt') }}"
  #~ if config["topology"]["nb_gnb"] > 2
  srgw1_db_password:
    file: "{{ secret('srgw1_db_password.txt') }}"
  #~ endif
#~ endif

#~ if "nextmn-srv6" in config["topology"]["dataplane"]
volumes:
  r0_db_volume:
  r1_db_volume:
  #~ if config["topology"]["nb_edges"] > 2
  r2_db_volume:
  #~ endif
  srgw0_db_volume:
  #~ if config["topology"]["nb_gnb"] > 2
  srgw1_db_volume:
  #~ endif
#~ endif

networks:
  ran:
    name: ran
    enable_ipv6: true
    driver: bridge
    driver_opts:
      com.docker.network.container_iface_prefix: ran-
      com.docker.network.bridge.name: ran
    ipam:
      driver: default
      config:
        - subnet: 10.1.0.0/24
          ip_range: 10.1.0.0/25
          gateway: 10.1.0.254
        - subnet: fd00:0:0:0:1::/80
          ip_range: fd00:0:0:0:1::/81
          gateway: fd00::1:8000:0:1
#~ if config["topology"]["controlplane"] == "free5gc"
  sbi:
    name: sbi
    enable_ipv6: false
    driver: bridge
    driver_opts:
      com.docker.network.container_iface_prefix: sbi-
      com.docker.network.bridge.name: sbi
    ipam:
      driver: default
      config:
        - subnet: 10.1.1.0/24
          ip_range: 10.1.1.0/25
          gateway: 10.1.1.254
  db:
    name: db
    enable_ipv6: false
    driver: bridge
    driver_opts:
      com.docker.network.container_iface_prefix: db-
      com.docker.network.bridge.name: db
    ipam:
      driver: default
      config:
        - subnet: 10.1.2.0/24
          ip_range: 10.1.2.0/25
          gateway: 10.1.2.254
#~ endif
  control:
    name: control
    enable_ipv6: true
    driver: bridge
    driver_opts:
      com.docker.network.container_iface_prefix: control-
      com.docker.network.bridge.name: control
    ipam:
      driver: default
      config:
        - subnet: 10.1.3.0/24
          ip_range: 10.1.3.0/25
          gateway: 10.1.3.254
        - subnet: fd00:0:0:0:2::/80
          ip_range: fd00:0:0:0:2::/81
          gateway: fd00::2:8000:0:1
  dataplane:
    name: dataplane
    enable_ipv6: true
    driver: bridge
    driver_opts:
      com.docker.network.container_iface_prefix: dataplane-
      com.docker.network.bridge.name: dataplane
    ipam:
      driver: default
      config:
        - subnet: 10.1.4.0/24
          ip_range: 10.1.4.0/25
          gateway: 10.1.4.254
        - subnet: fd00:0:0:0:3::/80
          ip_range: fd00:0:0:0:3::/81
          gateway: fd00::3:8000:0:1
  edge:
    name: edge
    enable_ipv6: false
    driver: bridge
    driver_opts:
      com.docker.network.container_iface_prefix: edge-
      com.docker.network.bridge.name: edge
    ipam:
      driver: default
      config:
        - subnet: 10.1.5.0/24
          ip_range: 10.1.5.0/25
          gateway: 10.1.5.254
  nextmndb:
    name: nextmndb
    enable_ipv6: false
    driver: bridge
    driver_opts:
      com.docker.network.container_iface_prefix: nmndb-
      com.docker.network.bridge.name: nmndb
    ipam:
      driver: default
      config:
        - subnet: 10.1.6.0/24
          ip_range: 10.1.6.0/25
          gateway: 10.1.6.254
        - subnet: fd00:0:0:0:4::/80
          ip_range: fd00:0:0:0:4::/81
          gateway: fd00::4:8000:0:1
